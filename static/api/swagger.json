{
  "openapi": "3.0.0",
  "paths": {
    "/v3/smart-contract": {
      "get": {
        "operationId": "SmartContractHttpController_get",
        "summary": "Get all smart contract",
        "description": "Return all smart contract",
        "x-speakeasy-name-override": "getAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Number of returned page. By default the returned page is the first.",
            "example": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "example": 20,
            "description": "Number of entities returned on each page. By default this number is set to 100.",
            "schema": {
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "network",
            "required": false,
            "in": "query",
            "description": "",
            "example": "polygon-mumbai",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "required": false,
            "in": "query",
            "description": "",
            "example": "0x820f8728E32519b9C91B2406BF48AF80711aFecD",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeAbi",
            "required": false,
            "in": "query",
            "description": "",
            "example": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeCompilationDetails",
            "required": false,
            "in": "query",
            "description": "",
            "example": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "SmartContract",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Paginate"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SmartContract"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Smart Contract Management"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/smart-contract/{network}/{address}": {
      "get": {
        "operationId": "SmartContractHttpController_findOne",
        "summary": "Get a smart contract",
        "description": "Return a smart contract.",
        "x-speakeasy-name-override": "getOne",
        "parameters": [
          {
            "name": "includeAbi",
            "required": false,
            "in": "query",
            "description": "",
            "example": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeCompilationDetails",
            "required": false,
            "in": "query",
            "description": "",
            "example": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "polygon-mumbai",
            "description": "EVM starton supported network.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "Smart contract address.",
            "example": "0x820f8728E32519b9C91B2406BF48AF80711aFecD",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmartContract"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Smart Contract Management"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      },
      "patch": {
        "operationId": "SmartContractHttpController_update",
        "summary": "Update a smart contract",
        "description": "Update a smart contract.",
        "x-speakeasy-name-override": "update",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "polygon-mumbai",
            "description": "EVM starton supported network.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "Smart contract address.",
            "example": "0x820f8728E32519b9C91B2406BF48AF80711aFecD",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSmartContractDto"
              },
              "examples": {
                "a": {
                  "summary": "Update contract off-chain.",
                  "description": "Update ERC20 test contract.",
                  "value": {
                    "name": "Test smart contract",
                    "description": "Test description",
                    "metadata": {
                      "test": "metadata"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmartContract"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Smart Contract Management"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      },
      "delete": {
        "operationId": "SmartContractHttpController_delete",
        "summary": "Delete a smart contract",
        "description": "Delete a smart contract.",
        "x-speakeasy-name-override": "delete",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "polygon-mumbai",
            "description": "EVM starton supported network.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Smart Contract Management"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/smart-contract/from-bytecode": {
      "post": {
        "operationId": "SmartContractHttpController_fromBytecode",
        "summary": "Deploy from bytecode (your own contract)",
        "description": "Deploy from bytecode allow you to deploy your own solidity code.",
        "x-speakeasy-name-override": "deployFromBytecode",
        "parameters": [
          {
            "name": "simulate",
            "required": false,
            "in": "query",
            "description": "Boolean for transaction simulation. Will estimate gas price.",
            "example": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeployFromBytecodeDto"
              },
              "examples": {
                "a": {
                  "summary": "Deploy from bytecode minimal",
                  "description": "",
                  "value": {
                    "name": "Minimal test contract",
                    "signerWallet": "0x298e760768c8481780397eE28A127eAd584df4ee",
                    "network": "polygon-mumbai",
                    "abi": [
                      {
                        "inputs": [],
                        "stateMutability": "nonpayable",
                        "type": "constructor"
                      }
                    ],
                    "params": [],
                    "bytecode": "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220543af7de4c3e10d25def66e7de6e0ecaf799771e226c96cf4620087585c071fd64736f6c63430008120033"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploySmartContractResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/INVALID_BYTECODE"
                    },
                    {
                      "$ref": "#/components/schemas/INVALID_ABI"
                    },
                    {
                      "$ref": "#/components/schemas/MISSING_ARGUMENT"
                    },
                    {
                      "$ref": "#/components/schemas/UNEXPECTED_ARGUMENT"
                    },
                    {
                      "$ref": "#/components/schemas/INVALID_ARGUMENT"
                    },
                    {
                      "$ref": "#/components/schemas/CALL_EXCEPTION"
                    },
                    {
                      "$ref": "#/components/schemas/NUMERIC_FAULT"
                    },
                    {
                      "$ref": "#/components/schemas/ENS_NOT_SUPPORTED"
                    },
                    {
                      "$ref": "#/components/schemas/EXECUTION_WILL_FAIL"
                    },
                    {
                      "$ref": "#/components/schemas/INVALID_GAS_PRICE"
                    },
                    {
                      "$ref": "#/components/schemas/INSUFFICIENT_FUNDS"
                    },
                    {
                      "$ref": "#/components/schemas/ALREADY_KNOWN"
                    },
                    {
                      "$ref": "#/components/schemas/NONCE_EXPIRED"
                    },
                    {
                      "$ref": "#/components/schemas/UNPREDICTABLE_GAS_LIMIT"
                    },
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/REPLACEMENT_GAS_PRICE_UNDERPRICED"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/UNKNOWN"
                    },
                    {
                      "$ref": "#/components/schemas/NO_PROVIDER_FOR_NETWORK"
                    },
                    {
                      "$ref": "#/components/schemas/COULD_NOT_ESTIMATE_GAS_PRICE"
                    },
                    {
                      "$ref": "#/components/schemas/COULD_NOT_SIGN"
                    },
                    {
                      "$ref": "#/components/schemas/COULD_NOT_ASSIGN_NONCE"
                    },
                    {
                      "$ref": "#/components/schemas/COULD_NOT_BROADCAST"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Smart Contract Management"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/smart-contract/from-template": {
      "post": {
        "operationId": "SmartContractHttpController_fromTemplate",
        "summary": "Deploy from template",
        "description": "Deploy from starton audited template.",
        "x-speakeasy-name-override": "deployFromTemplate",
        "parameters": [
          {
            "name": "simulate",
            "required": false,
            "in": "query",
            "description": "Boolean for transaction simulation. Will estimate gas price.",
            "example": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Deploy smart contract from template body payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeployFromTemplateDto"
              },
              "examples": {
                "a": {
                  "summary": "ERC20_MINT_META_TRANSACTION",
                  "description": "Example on ERC20 template minimal deployment.",
                  "value": {
                    "network": "polygon-mumbai",
                    "signerWallet": "0x298e760768c8481780397eE28A127eAd584df4ee",
                    "templateId": "ERC20_MINT_META_TRANSACTION",
                    "name": "TestToken",
                    "params": [
                      "TestToken",
                      "TEST",
                      "1000000000000000000000000",
                      "0x298e760768c8481780397eE28A127eAd584df4ee"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploySmartContractResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/SMART_CONTRACT_NOT_ACTIVATED"
                    },
                    {
                      "$ref": "#/components/schemas/INVALID_BYTECODE"
                    },
                    {
                      "$ref": "#/components/schemas/INVALID_ABI"
                    },
                    {
                      "$ref": "#/components/schemas/MISSING_ARGUMENT"
                    },
                    {
                      "$ref": "#/components/schemas/UNEXPECTED_ARGUMENT"
                    },
                    {
                      "$ref": "#/components/schemas/INVALID_ARGUMENT"
                    },
                    {
                      "$ref": "#/components/schemas/CALL_EXCEPTION"
                    },
                    {
                      "$ref": "#/components/schemas/NUMERIC_FAULT"
                    },
                    {
                      "$ref": "#/components/schemas/ENS_NOT_SUPPORTED"
                    },
                    {
                      "$ref": "#/components/schemas/EXECUTION_WILL_FAIL"
                    },
                    {
                      "$ref": "#/components/schemas/INVALID_GAS_PRICE"
                    },
                    {
                      "$ref": "#/components/schemas/INSUFFICIENT_FUNDS"
                    },
                    {
                      "$ref": "#/components/schemas/ALREADY_KNOWN"
                    },
                    {
                      "$ref": "#/components/schemas/NONCE_EXPIRED"
                    },
                    {
                      "$ref": "#/components/schemas/UNPREDICTABLE_GAS_LIMIT"
                    },
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/MICROSERVICE_NOT_RESPONDING"
                    },
                    {
                      "$ref": "#/components/schemas/UNKNOWN"
                    },
                    {
                      "$ref": "#/components/schemas/COULD_NOT_ESTIMATE_GAS_PRICE"
                    },
                    {
                      "$ref": "#/components/schemas/COULD_NOT_BROADCAST"
                    },
                    {
                      "$ref": "#/components/schemas/COULD_NOT_ASSIGN_NONCE"
                    },
                    {
                      "$ref": "#/components/schemas/COULD_NOT_SIGN"
                    },
                    {
                      "$ref": "#/components/schemas/NO_PROVIDER_FOR_NETWORK"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Smart Contract Management"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/smart-contract/{network}/{address}/call": {
      "post": {
        "operationId": "SmartContractHttpController_call",
        "summary": "Call smart contract",
        "description": "Call a specific function from a smart contract",
        "x-speakeasy-name-override": "call",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "polygon-mumbai",
            "description": "EVM starton supported network.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "Smart contract address.",
            "example": "0x820f8728E32519b9C91B2406BF48AF80711aFecD",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "simulate",
            "required": false,
            "in": "query",
            "description": "Boolean for transaction simulation. Will estimate gas price.",
            "example": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Body to interact with a smart contract.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CallDto"
              },
              "examples": {
                "a": {
                  "summary": "Call mint function of ERC20_MINT_META_TRANSACTIONS",
                  "description": "Mint of one ERC20 token.",
                  "value": {
                    "functionName": "mint",
                    "params": [
                      "0x298e760768c8481780397eE28A127eAd584df4ee",
                      "1000000000000000000"
                    ],
                    "signerWallet": "0x298e760768c8481780397eE28A127eAd584df4ee"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/INVALID_BYTECODE"
                    },
                    {
                      "$ref": "#/components/schemas/INVALID_ABI"
                    },
                    {
                      "$ref": "#/components/schemas/INVALID_FUNCTION"
                    },
                    {
                      "$ref": "#/components/schemas/MISSING_ARGUMENT"
                    },
                    {
                      "$ref": "#/components/schemas/UNEXPECTED_ARGUMENT"
                    },
                    {
                      "$ref": "#/components/schemas/INVALID_ARGUMENT"
                    },
                    {
                      "$ref": "#/components/schemas/CALL_EXCEPTION"
                    },
                    {
                      "$ref": "#/components/schemas/NUMERIC_FAULT"
                    },
                    {
                      "$ref": "#/components/schemas/ENS_NOT_SUPPORTED"
                    },
                    {
                      "$ref": "#/components/schemas/UNPREDICTABLE_GAS_LIMIT"
                    },
                    {
                      "$ref": "#/components/schemas/EXECUTION_WILL_FAIL"
                    },
                    {
                      "$ref": "#/components/schemas/INVALID_GAS_PRICE"
                    },
                    {
                      "$ref": "#/components/schemas/INSUFFICIENT_FUNDS"
                    },
                    {
                      "$ref": "#/components/schemas/ALREADY_KNOWN"
                    },
                    {
                      "$ref": "#/components/schemas/NONCE_EXPIRED"
                    },
                    {
                      "$ref": "#/components/schemas/CONTRACT_NOT_YET_DEPLOYED"
                    },
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/REPLACEMENT_GAS_PRICE_UNDERPRICED"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/UNKNOWN"
                    },
                    {
                      "$ref": "#/components/schemas/COULD_NOT_BROADCAST"
                    },
                    {
                      "$ref": "#/components/schemas/NO_PROVIDER_FOR_NETWORK"
                    },
                    {
                      "$ref": "#/components/schemas/COULD_NOT_ESTIMATE_GAS_PRICE"
                    },
                    {
                      "$ref": "#/components/schemas/COULD_NOT_ASSIGN_NONCE"
                    },
                    {
                      "$ref": "#/components/schemas/COULD_NOT_SIGN"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Smart Contract Management"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/smart-contract/{network}/{address}/read": {
      "post": {
        "operationId": "SmartContractHttpController_read",
        "summary": "Read smart contract",
        "description": "Read a specific function from a smart contract",
        "x-speakeasy-name-override": "read",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "polygon-mumbai",
            "description": "EVM starton supported network.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "Smart contract address.",
            "example": "0x820f8728E32519b9C91B2406BF48AF80711aFecD",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Call read function of smart contracts.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReadDto"
              },
              "examples": {
                "a": {
                  "summary": "balanceOf on ERC20_MINT_META_TRANSACTIONS",
                  "description": "Calling read function.",
                  "value": {
                    "functionName": "balanceOf",
                    "params": [
                      "0x298e760768c8481780397eE28A127eAd584df4ee"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadSmartContractResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/INVALID_BYTECODE"
                    },
                    {
                      "$ref": "#/components/schemas/INVALID_ABI"
                    },
                    {
                      "$ref": "#/components/schemas/INVALID_FUNCTION"
                    },
                    {
                      "$ref": "#/components/schemas/MISSING_ARGUMENT"
                    },
                    {
                      "$ref": "#/components/schemas/UNEXPECTED_ARGUMENT"
                    },
                    {
                      "$ref": "#/components/schemas/INVALID_ARGUMENT"
                    },
                    {
                      "$ref": "#/components/schemas/CALL_EXCEPTION"
                    },
                    {
                      "$ref": "#/components/schemas/NUMERIC_FAULT"
                    },
                    {
                      "$ref": "#/components/schemas/EXECUTION_WILL_FAIL"
                    },
                    {
                      "$ref": "#/components/schemas/ENS_NOT_SUPPORTED"
                    },
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/UNKNOWN"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Smart Contract Management"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/smart-contract/{network}/{address}/available-functions": {
      "get": {
        "operationId": "SmartContractHttpController_availableFunction",
        "summary": "Get functions & events",
        "description": "Return the read functions, write functions and events of a smart contract",
        "x-speakeasy-name-override": "getFunctions",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "polygon-mumbai",
            "description": "EVM starton supported network.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "Smart contract address.",
            "example": "0x820f8728E32519b9C91B2406BF48AF80711aFecD",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableFunctions"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/INVALID_BYTECODE"
                    },
                    {
                      "$ref": "#/components/schemas/INVALID_ABI"
                    },
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/UNKNOWN"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Smart Contract Management"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/smart-contract/import-existing": {
      "post": {
        "operationId": "SmartContractHttpController_importExisting",
        "summary": "Import existing contract",
        "description": "Import a contract already deployed",
        "x-speakeasy-name-override": "importExisting",
        "parameters": [
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "Smart contract address.",
            "example": "0x820f8728E32519b9C91B2406BF48AF80711aFecD",
            "schema": {}
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportSmartContractDto"
              },
              "examples": {
                "a": {
                  "summary": "",
                  "description": "",
                  "value": {
                    "name": "Minimal contract tests.",
                    "description": "Test minimal contract tests.",
                    "address": "0x1C1f7A4d7F853856b964947CA03B92993D3ef40e",
                    "abi": [
                      {
                        "inputs": [],
                        "stateMutability": "nonpayable",
                        "type": "constructor"
                      }
                    ],
                    "network": "polygon-mumbai"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmartContract"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/INVALID_CONTRACT_ADDRESS"
                    },
                    {
                      "$ref": "#/components/schemas/INVALID_ABI"
                    },
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Smart Contract Management"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/transaction": {
      "get": {
        "operationId": "TransactionHttpController_get",
        "summary": "Get all transactions",
        "description": "Return all transactions",
        "x-speakeasy-name-override": "getAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Number of returned page. By default the returned page is the first.",
            "example": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "example": 20,
            "description": "Number of entities returned on each page. By default this number is set to 100.",
            "schema": {
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "network",
            "required": false,
            "in": "query",
            "example": "polygon-mumbai",
            "description": "Specifies the network on which the transactions are deployed (filter). See <a href='https://docs.starton.com/docs/overview#supported-networks'>supported networks</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transactionHash",
            "required": false,
            "in": "query",
            "example": "0x59d2053f9d73d9e7d81acab1890b7f53d1718d27947092a5962e49e59b2596b5",
            "description": "The hash of a specific transaction (filter).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "required": false,
            "in": "query",
            "example": "0x298e760768c8481780397eE28A127eAd584df4ee",
            "description": "The address receiver of transactions, which can be a smart contract (filter).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "required": false,
            "in": "query",
            "example": "0x298e760768c8481780397eE28A127eAd584df4ee",
            "description": "The wallet used to sign the transactions (filter).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "required": false,
            "in": "query",
            "description": "Retrieves transactions executed after a specified date.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Transaction",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Paginate"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Transaction"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Transaction Manager"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      },
      "post": {
        "operationId": "TransactionCreateHttpController_post",
        "summary": "Create a transaction",
        "description": "Create a transaction.",
        "x-speakeasy-name-override": "create",
        "parameters": [
          {
            "name": "simulate",
            "required": false,
            "in": "query",
            "description": "Boolean for transaction simulation. Will estimate gas price.",
            "example": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Transaction payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionDto"
              },
              "examples": {
                "a": {
                  "summary": "Simple transaction",
                  "description": "Minimal required fields to emit a transaction with relayer",
                  "value": {
                    "signerWallet": "0x298e760768c8481780397eE28A127eAd584df4ee",
                    "to": "0x298e760768c8481780397eE28A127eAd584df4ee",
                    "value": "0",
                    "speed": "low",
                    "network": "polygon-mumbai"
                  }
                },
                "b": {
                  "summary": "Bnb Chain custom gas transaction",
                  "description": "Create transaction with custom gas on bnb chain.",
                  "value": {
                    "signerWallet": "0x298e760768c8481780397eE28A127eAd584df4ee",
                    "to": "0x298e760768c8481780397eE28A127eAd584df4ee",
                    "value": "0",
                    "speed": "custom",
                    "network": "binance-testnet",
                    "customGas": {
                      "gasPrice": "5000000000"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/NONCE_EXPIRED"
                    },
                    {
                      "$ref": "#/components/schemas/EXECUTION_WILL_FAIL"
                    },
                    {
                      "$ref": "#/components/schemas/INVALID_GAS_PRICE"
                    },
                    {
                      "$ref": "#/components/schemas/INSUFFICIENT_FUNDS"
                    },
                    {
                      "$ref": "#/components/schemas/ALREADY_KNOWN"
                    },
                    {
                      "$ref": "#/components/schemas/UNPREDICTABLE_GAS_LIMIT"
                    },
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/REPLACEMENT_GAS_PRICE_UNDERPRICED"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_ASSIGN_NONCE"
                    },
                    {
                      "$ref": "#/components/schemas/COULD_NOT_BROADCAST"
                    },
                    {
                      "$ref": "#/components/schemas/COULD_NOT_ESTIMATE_GAS_PRICE"
                    },
                    {
                      "$ref": "#/components/schemas/NO_PROVIDER_FOR_NETWORK"
                    },
                    {
                      "$ref": "#/components/schemas/COULD_NOT_SIGN"
                    },
                    {
                      "$ref": "#/components/schemas/UNKNOWN"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Transaction Manager"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/transaction/{id}": {
      "get": {
        "operationId": "TransactionHttpController_findOne",
        "summary": "Get a transaction",
        "description": "Return a transaction.",
        "x-speakeasy-name-override": "getOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "example": "tx_1abfa87e04814cb7a669d614d1fe5f78",
            "description": "Id of the transaction",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Transaction Manager"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/kms/wallet": {
      "get": {
        "operationId": "WalletHttpController_get",
        "summary": "Get all wallet",
        "description": "Return all wallet",
        "x-speakeasy-name-override": "getAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Number of returned page. By default the returned page is the first.",
            "example": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "example": 20,
            "description": "Number of entities returned on each page. By default this number is set to 100.",
            "schema": {
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "schema": {
              "pattern": "^[\\w\\-\\s]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Wallet",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Paginate"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Wallet"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Wallet"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      },
      "post": {
        "operationId": "WalletHttpController_post",
        "summary": "Create a wallet",
        "description": "Create a wallet.",
        "x-speakeasy-name-override": "create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWalletDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wallet"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Wallet"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/kms/wallet/{address}": {
      "get": {
        "operationId": "WalletHttpController_findOne",
        "summary": "Get a wallet",
        "description": "Return a wallet.",
        "x-speakeasy-name-override": "getOne",
        "parameters": [
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "",
            "example": "0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wallet"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Wallet"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      },
      "patch": {
        "operationId": "WalletHttpController_update",
        "summary": "Update a wallet",
        "description": "Update a wallet.",
        "x-speakeasy-name-override": "update",
        "parameters": [
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "",
            "example": "0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWalletDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wallet"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Wallet"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      },
      "delete": {
        "operationId": "WalletHttpController_delete",
        "summary": "Delete a wallet",
        "description": "Delete a wallet.",
        "x-speakeasy-name-override": "delete",
        "parameters": [
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "",
            "example": "0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deleteKeyOnKms",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Wallet"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/kms/wallet/import-provider-key": {
      "post": {
        "operationId": "WalletHttpController_importProviderKey",
        "summary": "Import a wallet",
        "description": "Import a wallet.",
        "x-speakeasy-name-override": "import",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportProviderKeyDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wallet"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Wallet"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/kms/wallet/{address}/sign-message": {
      "post": {
        "operationId": "WalletHttpController_signMessage",
        "summary": "Sign a message",
        "description": "Sign a message.",
        "x-speakeasy-name-override": "sign",
        "parameters": [
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "",
            "example": "0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignMessageDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Wallet"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/kms/wallet/{address}/{network}/nonce/available": {
      "get": {
        "operationId": "WalletHttpController_getWalletAvailableNonces",
        "summary": "Get available nonce for a wallet",
        "description": "Get available nonce for a wallet",
        "x-speakeasy-name-override": "getAvailableNonces",
        "x-speakeasy-group": "Transaction Manager",
        "parameters": [
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "",
            "example": "0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "polygon-mumbai",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoncesAvailable"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_PROCESS_ENTITY"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_ASSIGN_NONCE"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Wallet",
          "Transaction Manager"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/kms/wallet/{address}/{network}/nonce/resync": {
      "post": {
        "operationId": "WalletHttpController_resyncWalletNonces",
        "summary": "Resync nonce for a wallet",
        "description": "Resync nonce for a wallet",
        "x-speakeasy-name-override": "resyncNonce",
        "parameters": [
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "",
            "example": "0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "polygon-mumbai",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resyncNonce"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_PROCESS_ENTITY"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_ASSIGN_NONCE"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Wallet",
          "Transaction Manager"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/kms": {
      "get": {
        "operationId": "KmsHttpController_get",
        "summary": "Get all kms",
        "description": "Return all kms",
        "x-speakeasy-name-override": "getAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Number of returned page. By default the returned page is the first.",
            "example": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "example": 20,
            "description": "Number of entities returned on each page. By default this number is set to 100.",
            "schema": {
              "maximum": 100,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Kms",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Paginate"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Kms"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Kms"
        ]
      },
      "post": {
        "operationId": "KmsHttpController_post",
        "summary": "Create a kms",
        "description": "Create a kms.",
        "x-speakeasy-name-override": "create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateKmsDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Kms"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Kms"
        ]
      }
    },
    "/v3/kms/{id}": {
      "get": {
        "operationId": "KmsHttpController_findOne",
        "summary": "Get a kms",
        "description": "Return a kms.",
        "x-speakeasy-name-override": "getOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "",
            "example": "kms_000",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Kms"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Kms"
        ]
      },
      "patch": {
        "operationId": "KmsHttpController_update",
        "summary": "Update a kms",
        "description": "Update a kms.",
        "x-speakeasy-name-override": "update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "",
            "example": "kms_000",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Kms"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Kms"
        ]
      },
      "delete": {
        "operationId": "KmsHttpController_delete",
        "summary": "Delete a kms",
        "description": "Delete a kms.",
        "x-speakeasy-name-override": "delete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "",
            "example": "kms_000",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Kms"
        ]
      }
    },
    "/v3/data/{network}/address/{address}/balance/native": {
      "get": {
        "operationId": "AddressHttpController_getNativeBalance",
        "summary": "Get native balance",
        "description": "Get native balance",
        "x-speakeasy-name-override": "getBalance",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "polygon-mainnet",
            "description": "The blockchain network you are checking data on.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "Your address.",
            "example": "0xc2132d05d31c914a87c6611c10748aeb04b58e8f",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressNativeBalanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Data"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/data/{network}/erc20/{contractAddress}/balance": {
      "get": {
        "operationId": "Erc20HttpController_getERC20Balance",
        "summary": "Get erc20 balance",
        "description": "Get erc20 balance",
        "x-speakeasy-name-override": "getERC20Balance",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "polygon-mainnet",
            "description": "The blockchain network you are checking data on.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contractAddress",
            "required": true,
            "in": "path",
            "example": "0xc2132d05d31c914a87c6611c10748aeb04b58e8f",
            "description": "The contract address.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "query",
            "description": "Address you want to check.",
            "example": "0x24cd470f549b136ec93ccd42c087124cf3ea3233",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ERC20BalanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Data"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/setting/relayer/{network}": {
      "get": {
        "operationId": "SettingRelayerHttpController_get",
        "summary": "Get settings",
        "description": "Return settings",
        "x-speakeasy-name-override": "get",
        "x-speakeasy-group": "transaction-manager.setting",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "polygon-mumbai",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingRelayer"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Transaction Manager"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      },
      "patch": {
        "operationId": "SettingRelayerHttpController_update",
        "summary": "Update settings",
        "description": "Update settings",
        "x-speakeasy-name-override": "update",
        "x-speakeasy-group": "transaction-manager.setting",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "polygon-mumbai",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSettingRelayerDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingRelayer"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Transaction Manager"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/data/{network}/gas-price": {
      "get": {
        "operationId": "GasPriceHttpController_getGasPriceForNetwork",
        "summary": "Get gas price",
        "description": "Return gas price",
        "x-speakeasy-name-override": "getGasPrice",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "polygon-mainnet",
            "description": "The blockchain network you are checking data on.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GasPrices"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Data"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/faucet/{network}": {
      "post": {
        "operationId": "FaucetHttpController_post",
        "summary": "Request faucet",
        "description": "Request faucet. You can do it one time per day.",
        "x-speakeasy-name-override": "requestFaucet",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "polygon-mumbai",
            "description": "EVM starton supported network.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequireFaucetDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Faucet"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/MICROSERVICE_NOT_RESPONDING"
                    },
                    {
                      "$ref": "#/components/schemas/COULD_NOT_PERFORM_REQUEST"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/TOO_EARLY"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Wallet"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/smart-contract-template": {
      "get": {
        "operationId": "SmartContractTemplateHttpController_get",
        "summary": "Get all templates",
        "description": "Return all templates created by starton",
        "x-speakeasy-name-override": "getAll",
        "x-speakeasy-group": "smart-contract.template",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Number of returned page. By default the returned page is the first.",
            "example": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "example": 20,
            "description": "Number of entities returned on each page. By default this number is set to 100.",
            "schema": {
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "isAudited",
            "required": false,
            "in": "query",
            "description": "",
            "example": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isActivated",
            "required": false,
            "in": "query",
            "description": "",
            "example": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "",
            "example": "ERC",
            "schema": {
              "pattern": "^[\\w\\-\\s]+$",
              "type": "string"
            }
          },
          {
            "name": "blockchain",
            "required": false,
            "in": "query",
            "description": "",
            "example": "polygon",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "required": false,
            "in": "query",
            "description": "",
            "example": "NFT",
            "schema": {
              "enum": [
                "NFT",
                "FUNGIBLE",
                "OTHER",
                "DEPRECATED",
                "SALE",
                "TOOL"
              ],
              "type": "string"
            }
          },
          {
            "name": "includeCompilationDetails",
            "required": false,
            "in": "query",
            "description": "",
            "example": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeForm",
            "required": false,
            "in": "query",
            "description": "",
            "example": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "SmartContractTemplate",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Paginate"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SmartContractTemplate"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Smart Contract Library"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/smart-contract-template/{id}": {
      "get": {
        "operationId": "SmartContractTemplateHttpController_findOne",
        "summary": "Get a template",
        "description": "Return a template.",
        "x-speakeasy-name-override": "getOne",
        "x-speakeasy-group": "smart-contract.template",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "",
            "example": "ERC721_META_TRANSACTION",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeForm",
            "required": false,
            "in": "query",
            "description": "",
            "example": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmartContractTemplate"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Smart Contract Library"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/network/{name}/rpc": {
      "get": {
        "operationId": "RpcHttpController_get",
        "summary": "Get all rpc (enterprise)",
        "description": "Return all rpc for a specific network",
        "x-speakeasy-name-override": "getAll",
        "x-speakeasy-group": "network.rpc",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "path",
            "description": "",
            "example": "optimism-functionnal-tests",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Number of returned page. By default the returned page is the first.",
            "example": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "example": 20,
            "description": "Number of entities returned on each page. By default this number is set to 100.",
            "schema": {
              "maximum": 100,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Rpc",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Paginate"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Rpc"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Network"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      },
      "post": {
        "operationId": "RpcHttpController_post",
        "summary": "Add a rpc (enterprise)",
        "description": "Add a rpc for a specific network",
        "x-speakeasy-name-override": "create",
        "x-speakeasy-group": "network.rpc",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "path",
            "description": "",
            "example": "optimism-functionnal-tests",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRpcDto"
              },
              "examples": {
                "a": {
                  "summary": "Add url for a given network",
                  "description": "",
                  "value": {
                    "url": "https://optimism.publicnode.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rpc"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Network"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/network/{name}/rpc/{id}": {
      "get": {
        "operationId": "RpcHttpController_findOne",
        "summary": "Get a rpc (enterprise)",
        "description": "Return a specific rpc for a specific network",
        "x-speakeasy-name-override": "getOne",
        "x-speakeasy-group": "network.rpc",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "path",
            "description": "",
            "example": "optimism-functionnal-tests",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "",
            "example": "rpc_7fb8f5ed4f1f4f06a18d86f78676d71d",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rpc"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Network"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      },
      "patch": {
        "operationId": "RpcHttpController_update",
        "summary": "Update a rpc (enterprise)",
        "description": "Update a specific rpc for a specific network",
        "x-speakeasy-name-override": "update",
        "x-speakeasy-group": "network.rpc",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "path",
            "description": "",
            "example": "optimism-functionnal-tests",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "",
            "example": "rpc_7fb8f5ed4f1f4f06a18d86f78676d71d",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRpcDto"
              },
              "examples": {
                "a": {
                  "summary": "Add url for a given network",
                  "description": "",
                  "value": {
                    "url": "https://optimism.publicnode.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rpc"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Network"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      },
      "delete": {
        "operationId": "RpcHttpController_delete",
        "summary": "Delete a rpc (enterprise)",
        "description": "Delete a rpc for a specific network",
        "x-speakeasy-name-override": "delete",
        "x-speakeasy-group": "network.rpc",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "",
            "example": "rpc_c3d39f5a79be4599b0cdff667ffd1df3",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "in": "path",
            "description": "",
            "example": "optimism-functionnal-tests",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Network"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/network": {
      "get": {
        "operationId": "NetworkHttpController_get",
        "summary": "Get all networks",
        "description": "Return all networks",
        "x-speakeasy-name-override": "getAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Number of returned page. By default the returned page is the first.",
            "example": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "example": 20,
            "description": "Number of entities returned on each page. By default this number is set to 100.",
            "schema": {
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "id",
            "required": false,
            "in": "query",
            "description": "",
            "schema": {
              "pattern": "^[\\w\\-\\s]+$",
              "type": "string"
            }
          },
          {
            "name": "testnet",
            "required": false,
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Network",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Paginate"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Network"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Network"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      },
      "post": {
        "operationId": "NetworkHttpController_post",
        "summary": "Create a network (enterprise)",
        "description": "Create a network (enterprise).",
        "x-speakeasy-name-override": "create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNetworkDto"
              },
              "examples": {
                "a": {
                  "summary": "Private network creation",
                  "description": "",
                  "value": {
                    "name": "optimism-functionnal-tests1698021528791",
                    "displayName": "optimism-private",
                    "logo": "https://optimism-invalid-test-logo.com",
                    "chainId": 10,
                    "symbol": "ETH",
                    "explorerUrl": "https://optimism-invalid-test-explorer.com",
                    "confirmationBlocks": 128,
                    "blockchain": "optimism",
                    "enableRelayer": false,
                    "enableExternalWallet": false,
                    "enableListener": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Network"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Network"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/network/{name}": {
      "get": {
        "operationId": "NetworkHttpController_findOne",
        "summary": "Get a network",
        "description": "Return a network.",
        "x-speakeasy-name-override": "getOne",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "path",
            "description": "",
            "example": "optimism-functionnal-tests",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Network"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Network"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      },
      "patch": {
        "operationId": "NetworkHttpController_update",
        "summary": "Update a network (enterprise)",
        "description": "Update a network.",
        "x-speakeasy-name-override": "update",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "path",
            "description": "",
            "example": "optimism-functionnal-tests",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNetworkDto"
              },
              "examples": {
                "a": {
                  "summary": "Update displayName",
                  "description": "",
                  "value": {
                    "displayName": "optimism-private-tests"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Network"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Network"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      },
      "delete": {
        "operationId": "NetworkHttpController_delete",
        "summary": "Delete a network (enterprise)",
        "description": "Delete a network (enterprise).",
        "x-speakeasy-name-override": "delete",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "path",
            "description": "",
            "example": "optimism-functionnal-tests1698021528793",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Network"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/watcher": {
      "get": {
        "operationId": "WatcherHttpController_get",
        "summary": "Get all watcher",
        "description": "Return all the watcher created on starton.",
        "x-speakeasy-name-override": "getAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Number of returned page. By default the returned page is the first.",
            "example": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "example": 20,
            "description": "Number of entities returned on each page. By default this number is set to 100.",
            "schema": {
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "",
            "example": "watcher",
            "schema": {
              "pattern": "^[\\w\\-\\s]+$",
              "type": "string"
            }
          },
          {
            "name": "address",
            "required": false,
            "in": "query",
            "description": "",
            "example": "0x298e760768c8481780397eE28A127eAd584df4ee",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "network",
            "required": false,
            "in": "query",
            "description": "",
            "example": "polygon-mumbai",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "",
            "example": "ADDRESS_ACTIVITY",
            "schema": {
              "enum": [
                "MINED_TRANSACTION",
                "ADDRESS_ACTIVITY",
                "ADDRESS_RECEIVED_NATIVE_CURRENCY",
                "ADDRESS_SENT_NATIVE_CURRENCY",
                "EVENT_TRANSFER",
                "ERC721_EVENT_TRANSFER",
                "ERC1155_EVENT_TRANSFER_SINGLE",
                "ERC1155_EVENT_TRANSFER_BATCH",
                "EVENT_MINT",
                "EVENT_APPROVAL",
                "EVENT_CUSTOM"
              ],
              "type": "string"
            }
          },
          {
            "name": "webhookUrl",
            "required": false,
            "in": "query",
            "description": "",
            "example": "https://webhook.site/db756457-9ca1-4975-9a3d-6257c9e0601e",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "confirmationsBlocks",
            "required": false,
            "in": "query",
            "description": "",
            "example": 0,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "paused",
            "required": false,
            "in": "query",
            "description": "",
            "example": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Watcher",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Paginate"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Watcher"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Monitor"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      },
      "post": {
        "operationId": "WatcherHttpController_post",
        "summary": "Create a watcher",
        "description": "Create a watcher.",
        "x-speakeasy-name-override": "create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWatcherDto"
              },
              "examples": {
                "a": {
                  "summary": "",
                  "description": "",
                  "value": {
                    "name": "watcher test",
                    "address": "0xfdf96b8e5a00deb18542ecf946a314c7dd4e8765",
                    "network": "polygon-mumbai",
                    "type": "ADDRESS_ACTIVITY",
                    "webhookUrl": "https://webhook.site/db756457-9ca1-4975-9a3d-6257c9e0601e",
                    "confirmationsBlocks": 0
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Watcher"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DATABASE_DUPLICATE"
                    }
                  ]
                }
              }
            }
          },
          "412": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/SERVER_NOT_RESPONDING"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/MICROSERVICE_NOT_RESPONDING"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Monitor"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/watcher/{id}": {
      "get": {
        "operationId": "WatcherHttpController_findOne",
        "summary": "Get a watcher",
        "description": "Return a watcher.",
        "x-speakeasy-name-override": "getOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "",
            "example": "ntif_f94e4a79611947d48254537a8861265d",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Watcher"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Monitor"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      },
      "patch": {
        "operationId": "WatcherHttpController_update",
        "summary": "Update a watcher",
        "description": "Update a watcher.",
        "x-speakeasy-name-override": "update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "",
            "example": "ntif_f94e4a79611947d48254537a8861265d",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWatcherDto"
              },
              "examples": {
                "a": {
                  "summary": "",
                  "description": "",
                  "value": {
                    "paused": false,
                    "confirmationsBlocks": 0
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Watcher"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Monitor"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      },
      "delete": {
        "operationId": "WatcherHttpController_delete",
        "summary": "Delete a watcher",
        "description": "Delete a watcher.",
        "x-speakeasy-name-override": "delete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Monitor"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/watcher/many-networks": {
      "post": {
        "operationId": "WatcherHttpController_postMany",
        "summary": "Create many watchers",
        "description": "Create many watchers.",
        "x-speakeasy-name-override": "createMany",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateManyWatcherDto"
              },
              "examples": {
                "a": {
                  "summary": "",
                  "description": "",
                  "value": {
                    "name": "watcher test on random address",
                    "address": "0xd13c0d191e0d822d821a709bf05cc5ad496a0318",
                    "networks": [
                      "polygon-mumbai",
                      "polygon-mainnet"
                    ],
                    "type": "ADDRESS_ACTIVITY",
                    "webhookUrl": "https://webhook.site/db756457-9ca1-4975-9a3d-6257c9e0601e",
                    "confirmationsBlocks": 0
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Watcher"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DATABASE_DUPLICATE"
                    }
                  ]
                }
              }
            }
          },
          "412": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/SERVER_NOT_RESPONDING"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/MICROSERVICE_NOT_RESPONDING"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Monitor"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/watcher/{id}/event": {
      "get": {
        "operationId": "WatcherEventHttpController_get",
        "summary": "Get all events",
        "description": "Return all events",
        "x-speakeasy-name-override": "getAllEvents",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Number of returned page. By default the returned page is the first.",
            "example": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "example": 20,
            "description": "Number of entities returned on each page. By default this number is set to 100.",
            "schema": {
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "",
            "example": "ntif_f94e4a79611947d48254537a8861265d",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "WatcherEvent",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Paginate"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/WatcherEvent"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Monitor"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/watcher/{id}/event/{eventId}": {
      "get": {
        "operationId": "WatcherEventHttpController_findOne",
        "summary": "Get a watcher event",
        "description": "Return a watcher event.",
        "x-speakeasy-name-override": "getOneEvent",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "",
            "example": "ntif_f94e4a79611947d48254537a8861265d",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "description": "",
            "example": "wevent_437e18e7470944099bd094e1c936e4cd",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatcherEvent"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Monitor"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/webhook/signing-secret": {
      "get": {
        "operationId": "WebhookSigningSecretHttpController_findOne",
        "summary": "Get signing secret",
        "description": "Get your signing secret. It allow you to verify the payload sent by starton api to your server",
        "x-speakeasy-name-override": "getSigningSecret",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSigningSecret"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Webhook"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/webhook/signing-secret/regenerate": {
      "post": {
        "operationId": "WebhookSigningSecretHttpController_post",
        "summary": "Regenerate signing secret",
        "description": "Delete your old signing secret and create a new one. All new payload will be sign with this secret.",
        "x-speakeasy-name-override": "regenerateSigningSecret",
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSigningSecret"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Webhook"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/webhook": {
      "get": {
        "operationId": "WebhookHttpController_get",
        "summary": "Get all webhooks",
        "description": "Return the list of all webhook sent to your server",
        "x-speakeasy-name-override": "getAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Number of returned page. By default the returned page is the first.",
            "example": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "example": 20,
            "description": "Number of entities returned on each page. By default this number is set to 100.",
            "schema": {
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "",
            "example": "SUCCESSFUL",
            "schema": {
              "enum": [
                "RETRYING",
                "SUCCESSFUL",
                "FAILED",
                "CANCELED"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Webhook",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Paginate"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Webhook"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Webhook"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/webhook/{id}": {
      "get": {
        "operationId": "WebhookHttpController_findOne",
        "summary": "Get a webhook",
        "description": "RReturn a specific webhook sent by starton.",
        "x-speakeasy-name-override": "getOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "",
            "example": "wh_4c2905f7276b415fac02ee3682189940",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Webhook"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/webhook/{id}/resend": {
      "post": {
        "operationId": "WebhookHttpController_resend",
        "summary": "Resend a webhook",
        "description": "Resend a specific webhook to your server. Useful if you mist an event or for test purpose",
        "x-speakeasy-name-override": "resend",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "",
            "example": "wh_4c2905f7276b415fac02ee3682189940",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          },
          "412": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_RESEND_WEBHOOK"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Webhook"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/webhook/{id}/cancel": {
      "post": {
        "operationId": "WebhookHttpController_cancel",
        "summary": "Cancel a webhook",
        "description": "Cancel a specific webhook",
        "x-speakeasy-name-override": "cancel",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "",
            "example": "wh_4c2905f7276b415fac02ee3682189940",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          },
          "412": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_CANCEL_WEBHOOK"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Webhook"
        ],
        "security": [
          {
            "starton-api-key": []
          }
        ]
      }
    },
    "/v3/ipfs/pin": {
      "get": {
        "operationId": "PinHttpController_get",
        "summary": "Get all files",
        "description": "Return all files pinned on IPFS",
        "x-speakeasy-name-override": "getAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Number of returned page. By default the returned page is the first.",
            "example": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "example": 20,
            "description": "Number of entities returned on each page. By default this number is set to 100.",
            "schema": {
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "cid",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "schema": {
              "pattern": "^[\\w\\-\\s]+$",
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "queued",
                "pinning",
                "pinned",
                "failed",
                "deleted"
              ],
              "type": "string"
            }
          },
          {
            "name": "includeDirectoryContent",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pin",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Paginate"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Pin"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Ipfs"
        ]
      },
      "post": {
        "operationId": "PinHttpController_post",
        "summary": "Pin a file already on IPFS",
        "description": "Pin a file already uploaded on IPFS and ask starton to keep a copy of it",
        "x-speakeasy-name-override": "pinExistingFile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePinDto"
              },
              "examples": {
                "a": {
                  "summary": "Pin an existing file",
                  "description": "",
                  "value": {
                    "cid": "bafkreiae3nprvu6qp6twwpokfk5lbd5qev34d6zrwmnv3jxetuc2zwmegq",
                    "name": "my file"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pin"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "413": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/MAXIMUM_STORAGE_REACHED"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Ipfs"
        ]
      }
    },
    "/v3/ipfs/pin/{id}": {
      "get": {
        "operationId": "PinHttpController_findOne",
        "summary": "Get a file",
        "description": "Return a file already uploaded on IPFS.",
        "x-speakeasy-name-override": "getOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "",
            "example": "req_f9701ff8e2ea4a1d964e0d6d40564801",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeDirectoryContent",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pin"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Ipfs"
        ]
      },
      "patch": {
        "operationId": "PinHttpController_update",
        "summary": "Update a file name/metadata",
        "description": "Update a file name or metadata. If you want to edit a file directly, you need to delete it and upload a new one, on IPFS file are referenced by unique hash",
        "x-speakeasy-name-override": "update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "",
            "example": "req_f9701ff8e2ea4a1d964e0d6d40564801",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePinDto"
              },
              "examples": {
                "a": {
                  "summary": "Update pin metadata",
                  "description": "",
                  "value": {
                    "name": "My new name",
                    "metadata": {
                      "test": true
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pin"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Ipfs"
        ]
      },
      "delete": {
        "operationId": "PinHttpController_delete",
        "summary": "Delete a pin",
        "description": "Delete a pin.",
        "x-speakeasy-name-override": "delete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "",
            "example": "req_f9701ff8e2ea4a1d964e0d6d40564801",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Ipfs"
        ]
      }
    },
    "/v3/ipfs/storage-used": {
      "get": {
        "operationId": "PinHttpController_getStorageUsedForProject",
        "summary": "Get storage used",
        "description": "Get storage used",
        "x-speakeasy-name-override": "getStorageUsed",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageUsed"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Ipfs"
        ]
      }
    },
    "/v3/ipfs/file": {
      "post": {
        "operationId": "PinHttpController_fromFile",
        "summary": "Upload a file",
        "description": "Upload a new file on IPFS",
        "x-speakeasy-name-override": "uploadFile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "type": "object"
                  },
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pin"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "413": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/MAXIMUM_STORAGE_REACHED"
                    },
                    {
                      "$ref": "#/components/schemas/PAYLOAD_TOO_LARGE"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Ipfs"
        ]
      }
    },
    "/v3/ipfs/folder": {
      "post": {
        "operationId": "PinHttpController_fromFolder",
        "summary": "Upload a folder",
        "description": "Upload a new folder on IPFS",
        "x-speakeasy-name-override": "uploadFolder",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "type": "object"
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pin"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "413": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/MAXIMUM_STORAGE_REACHED"
                    },
                    {
                      "$ref": "#/components/schemas/PAYLOAD_TOO_LARGE"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Ipfs"
        ]
      }
    },
    "/v3/ipfs/json": {
      "post": {
        "operationId": "PinHttpController_fromJson",
        "summary": "Upload a json",
        "description": "Upload a json.",
        "x-speakeasy-name-override": "uploadJson",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadJsonDto"
              },
              "examples": {
                "a": {
                  "summary": "Pin a json",
                  "description": "",
                  "value": {
                    "name": "my file",
                    "content": {
                      "name": "NFT name",
                      "description": "NFT description",
                      "external_url": "https://starton.com",
                      "image": "ipfs://ipfs/(NFT IMAGE CID)",
                      "attributes": [
                        {
                          "trait_type": "Creator",
                          "value": "starton.com"
                        },
                        {
                          "trait_type": "Role",
                          "value": "Builder"
                        },
                        {
                          "trait_type": "Author",
                          "value": "Vitalik"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pin"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "413": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/MAXIMUM_STORAGE_REACHED"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Ipfs"
        ]
      }
    },
    "/v3/project-member": {
      "get": {
        "operationId": "ProjectMemberHttpController_get",
        "summary": "Get all members",
        "description": "Return all members",
        "x-speakeasy-name-override": "getAll",
        "x-speakeasy-group": "project.member",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProjectMember",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Paginate"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ProjectMember"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Project"
        ]
      }
    },
    "/v3/project-member/{userId}": {
      "delete": {
        "operationId": "ProjectMemberHttpController_delete",
        "summary": "Delete a member",
        "description": "Delete a member.",
        "x-speakeasy-name-override": "delete",
        "x-speakeasy-group": "project.member",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/MICROSERVICE_NOT_RESPONDING"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Project"
        ]
      }
    },
    "/v3/project-member/invitation": {
      "get": {
        "operationId": "InvitationHttpController_get",
        "summary": "Get all member invitation",
        "description": "Get all member invitation",
        "x-speakeasy-name-override": "getAll",
        "x-speakeasy-group": "project.member.invitation",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Number of returned page. By default the returned page is the first.",
            "example": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "example": 20,
            "description": "Number of entities returned on each page. By default this number is set to 100.",
            "schema": {
              "maximum": 100,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Invitation",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Paginate"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Invitation"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Project"
        ]
      },
      "post": {
        "operationId": "InvitationHttpController_post",
        "summary": "Invite a member",
        "description": "Invite a member.",
        "x-speakeasy-name-override": "create",
        "x-speakeasy-group": "project.member.invitation",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInvitationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invitation"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/NOT_AUTHENTICATED"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Project"
        ]
      }
    },
    "/v3/project-member/invitation/{id}": {
      "delete": {
        "operationId": "InvitationHttpController_delete",
        "summary": "Delete an invitation",
        "description": "Delete an invitation.",
        "x-speakeasy-name-override": "delete",
        "x-speakeasy-group": "project.member.invitation",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "",
            "example": "invit_f9701ff8e2ea4a1d964e0d6d40564801",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Project"
        ]
      }
    }
  },
  "info": {
    "title": "Starton API: Documentation",
    "description": "# Introduction\n\nStarton is the all-in-one WEB3 api to integrate blockchain feature inside your project.\n\n# Authentication\n\nTo access API endpoints, you must provide a valid API key. You can create new\nAPI keys in your [account settings](https://app.starton.com/projects/default/developer). Be\ncareful when handling your keys as they give access to all your project,\nyou should treat them like passwords and they should never be committed to\nsource control.\n\nTo authenticate with API, you can supply the API key as a header\n(`x-api-key: YOUR_API_KEY`).\n\nSome API endpoints allow unauthenticated requests for public resources and\nthey can be called without an API key.\n\n# Errors\n\nAll successful API requests will be returned with a 200 or 201 status code.\n If there’s an error while making the\nrequest, the appropriate status code is returned with the error message:\n\n```\n{\n\t\"statusCode\": 401,\n\t\"errorCode\": \"NOT_AUTHENTICATED\",\n\t\"message\": \"Not authenticated\",\n\t\"timestamp\": \"2023-10-14T00:12:22.470Z\",\n\t\"path\": \"/v3/project\",\n\t\"context\": {},\n}\n```\n\n# Pagination\n\nMost top-level API resources have support for `getAll` API methods. For instance,\nyou can list smart contracts, webhooks, templates etc. These list methods share\ncommon parameters, taking both `limit` and `page`.\n\nResponses will be in the root `meta` and `items` key. For example:\n\n```\n{\n\tdata: […],\n\tmeta: {\n\t\titemCount: 10,\n\t\ttotalItems: 50,\n\t\titemsPerPage: 10,\n\t\ttotalPages: 5\n\t\tcurrentPage: 1\n\t}\n}\n```\n\n\n# Rate limits\n\nDepending on your plan, you will benefit from a specific rate limit.\n\n| Plan      | Rate limit               |\n|-----------|--------------------------|\n| Free      | 50 requests/min          |\n| Developer | 100 requests/min         |\n| Business  | up to 10000 requests/min |\n",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "Smart Contract Management",
      "description": "The Smart contract management is an abstraction on top of our **Transaction Manager** and it allow you to build and automate your smart contract transaction easily, without struggling with the ABI and params encoding. With it you can:\n- **Deploying smart contract:** Deploy **audited** contract from our library or your own smart contract\n- **Import existing contract:** Import existing contract to view them on your dashboard and interact with them.\n- **Interact:** Read state and interact with the smart contract previously deployed or imported"
    },
    {
      "name": "Transaction Manager",
      "description": "Starton Transaction Manager. Handle nonce issue, gas management, rebroadcasting etc."
    },
    {
      "name": "Wallet",
      "description": "Starton wallet service"
    },
    {
      "name": "Kms",
      "description": "Starton kms service"
    },
    {
      "name": "Data",
      "description": "Starton Blockchain data endpoints."
    },
    {
      "name": "Smart Contract Library",
      "description": "A list of audited template you can deploy with one API call."
    },
    {
      "name": "Network",
      "description": "Get all available network, or add your custom one (enterprise only)"
    },
    {
      "name": "Monitor",
      "description": "The list of conditions that trigger a watcher event"
    },
    {
      "name": "Webhook",
      "description": "Manage all the webhook you receive inside your app"
    },
    {
      "name": "Ipfs",
      "description": "IPFS allows users to host and receive content in a manner similar to BitTorrent. As opposed to a centrally located server, IPFS is built around a decentralized system creating a resilient system of file storage and sharing. Starton IPFS storage service acts as a liaison between the IPFS protocol and you, with a user-friendly interface that lets you pin or upload files as you would any other storage service. You get all the benefits of hosting your content on the protocol while still having the easy process of uploading it."
    },
    {
      "name": "Project",
      "description": "Project"
    }
  ],
  "servers": [
    {
      "url": "https://api.starton.com"
    }
  ],
  "components": {
    "securitySchemes": {
      "starton-api-key": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key"
      },
      "starton-cookie": {
        "type": "apiKey",
        "in": "header",
        "name": "ory_kratos_session"
      },
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      },
      "starton-session-token": {
        "type": "apiKey",
        "in": "header",
        "name": "x-session-token"
      }
    },
    "schemas": {
      "BAD_REQUEST_EXCEPTION": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 400
          },
          "errorCode": {
            "type": "string",
            "default": "BAD_REQUEST_EXCEPTION"
          },
          "message": {
            "type": "array",
            "default": [
              "Bad request. Please verify your inputs."
            ],
            "items": {
              "type": "string"
            }
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "COULD_NOT_FIND_RESOURCE": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 404
          },
          "errorCode": {
            "type": "string",
            "default": "COULD_NOT_FIND_RESOURCE"
          },
          "message": {
            "type": "string",
            "default": "Could not found resource."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "SmartContract": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "name": {
            "type": "string",
            "description": ""
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": ""
          },
          "network": {
            "type": "string",
            "description": ""
          },
          "abi": {
            "type": "array",
            "description": "",
            "items": {
              "type": "object"
            }
          },
          "address": {
            "type": "string",
            "description": ""
          },
          "params": {
            "type": "array",
            "nullable": true,
            "description": "",
            "items": {
              "type": "string"
            }
          },
          "compilationDetails": {
            "type": "object",
            "description": "",
            "nullable": true
          },
          "creationHash": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "status": {
            "enum": [
              "UNSIGNED",
              "ERROR_TX",
              "ERROR_PUBLISH",
              "PUBLISHED",
              "RECEIVED_BY_STARTON",
              "CREATED_BY_STARTON",
              "COULD_NOT_ESTIMATE_GAS_PRICE",
              "COULD_NOT_INCREASE_GAS_PRICE",
              "GAS_PRICE_ESTIMATED",
              "INVALID_GAS_PRICE",
              "REPLACEMENT_GAS_PRICE_UNDERPRICED",
              "COULD_NOT_ESTIMATE_GAS_LIMIT",
              "GAS_LIMIT_ESTIMATED",
              "EXECUTION_WILL_FAIL",
              "INVALID_ARGUMENT",
              "INSUFFICIENT_FUNDS",
              "INSUFFICIENT_FUNDS_AFTER_BROADCAST",
              "COULD_NOT_ASSIGN_NONCE",
              "COULD_NOT_UNSTUCK_NONCE",
              "NONCE_ASSIGNED",
              "NONCE_EXPIRED",
              "COULD_NOT_SIGN",
              "SIGNED",
              "SENT_TO_MEMPOOL",
              "COULD_NOT_BROADCAST",
              "ALREADY_KNOWN",
              "MINED",
              "CONFIRMED",
              "REPLACED",
              "FAILED",
              "MONITORING_IN_PROGRESS",
              "STUCK_BY_PREVIOUS_TRANSACTION",
              "MAX_GAS_PRICE_REACH",
              "GAS_PRICE_INCREASED",
              "NEW_TRANSACTION_HASH",
              "UNKNOWN",
              "MONITORING_INTERRUPTED"
            ],
            "type": "string",
            "description": ""
          },
          "state": {
            "enum": [
              "SUCCESS",
              "PENDING",
              "MANUAL_ACTION_REQUIRED",
              "ERROR"
            ],
            "type": "string",
            "description": ""
          },
          "minedDate": {
            "format": "date-time",
            "type": "string",
            "nullable": true,
            "description": ""
          },
          "blockNumber": {
            "type": "number",
            "nullable": true,
            "description": ""
          },
          "templateId": {
            "type": "string",
            "nullable": true,
            "description": ""
          },
          "projectId": {
            "type": "string",
            "description": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T01:06:33.939Z",
            "description": ""
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T01:06:33.939Z",
            "description": ""
          }
        },
        "required": [
          "id",
          "name",
          "network",
          "address",
          "status",
          "state",
          "projectId",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateSmartContractDto": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": ""
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": ""
          },
          "metadata": {
            "type": "object",
            "description": ""
          }
        }
      },
      "INVALID_BYTECODE": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 400
          },
          "errorCode": {
            "type": "string",
            "default": "INVALID_BYTECODE"
          },
          "message": {
            "type": "string",
            "default": "Your bytecode is invalid."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "INVALID_ABI": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 400
          },
          "errorCode": {
            "type": "string",
            "default": "INVALID_ABI"
          },
          "message": {
            "type": "string",
            "default": "INVALID_ABI"
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "MISSING_ARGUMENT": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 400
          },
          "errorCode": {
            "type": "string",
            "default": "MISSING_ARGUMENT"
          },
          "message": {
            "type": "string",
            "default": "Some params are missing."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "UNEXPECTED_ARGUMENT": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 400
          },
          "errorCode": {
            "type": "string",
            "default": "UNEXPECTED_ARGUMENT"
          },
          "message": {
            "type": "string",
            "default": "Your params are invalid."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "INVALID_ARGUMENT": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 400
          },
          "errorCode": {
            "type": "string",
            "default": "INVALID_ARGUMENT"
          },
          "message": {
            "type": "string",
            "default": "Some params are invalid."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "CALL_EXCEPTION": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 400
          },
          "errorCode": {
            "type": "string",
            "default": "CALL_EXCEPTION"
          },
          "message": {
            "type": "string",
            "default": "Your call to the blockchain encounters revert."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "NUMERIC_FAULT": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 400
          },
          "errorCode": {
            "type": "string",
            "default": "NUMERIC_FAULT"
          },
          "message": {
            "type": "string",
            "default": "Illegal operations with numerical values."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "ENS_NOT_SUPPORTED": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 400
          },
          "errorCode": {
            "type": "string",
            "default": "ENS_NOT_SUPPORTED"
          },
          "message": {
            "type": "string",
            "default": "ENS is not supported on this network."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "UNKNOWN": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 500
          },
          "errorCode": {
            "type": "string",
            "default": "UNKNOWN"
          },
          "message": {
            "type": "string",
            "default": "Unknown error."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "NO_PROVIDER_FOR_NETWORK": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 500
          },
          "errorCode": {
            "type": "string",
            "default": "NO_PROVIDER_FOR_NETWORK"
          },
          "message": {
            "type": "string",
            "default": "No provider for network."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "COULD_NOT_ESTIMATE_GAS_PRICE": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 500
          },
          "errorCode": {
            "type": "string",
            "default": "COULD_NOT_ESTIMATE_GAS_PRICE"
          },
          "message": {
            "type": "string",
            "default": "Could not estimate gas price."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "COULD_NOT_SIGN": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 500
          },
          "errorCode": {
            "type": "string",
            "default": "COULD_NOT_SIGN"
          },
          "message": {
            "type": "string",
            "default": "Could not sign transaction."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "COULD_NOT_ASSIGN_NONCE": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 500
          },
          "errorCode": {
            "type": "string",
            "default": "COULD_NOT_ASSIGN_NONCE"
          },
          "message": {
            "type": "string",
            "default": "Could not assign nonce."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "EXECUTION_WILL_FAIL": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 400
          },
          "errorCode": {
            "type": "string",
            "default": "EXECUTION_WILL_FAIL"
          },
          "message": {
            "type": "string",
            "default": "This call will revert."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "REPLACEMENT_GAS_PRICE_UNDERPRICED": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 422
          },
          "errorCode": {
            "type": "string",
            "default": "REPLACEMENT_GAS_PRICE_UNDERPRICED"
          },
          "message": {
            "type": "string",
            "default": "Your transaction is underpriced. You try to replace an existing transaction with not enough gas fee."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "INVALID_GAS_PRICE": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 400
          },
          "errorCode": {
            "type": "string",
            "default": "INVALID_GAS_PRICE"
          },
          "message": {
            "type": "string",
            "default": "Wrong gas price."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "INSUFFICIENT_FUNDS": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 400
          },
          "errorCode": {
            "type": "string",
            "default": "INSUFFICIENT_FUNDS"
          },
          "message": {
            "type": "string",
            "default": "Your funds are insufficient."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "ALREADY_KNOWN": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 400
          },
          "errorCode": {
            "type": "string",
            "default": "ALREADY_KNOWN"
          },
          "message": {
            "type": "string",
            "default": "This transaction is already known by the node."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "NONCE_EXPIRED": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 400
          },
          "errorCode": {
            "type": "string",
            "default": "NONCE_EXPIRED"
          },
          "message": {
            "type": "string",
            "default": "Your nonce is too low."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "COULD_NOT_BROADCAST": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 500
          },
          "errorCode": {
            "type": "string",
            "default": "COULD_NOT_BROADCAST"
          },
          "message": {
            "type": "string",
            "default": "Could not broadcast this transaction."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "UNPREDICTABLE_GAS_LIMIT": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 400
          },
          "errorCode": {
            "type": "string",
            "default": "UNPREDICTABLE_GAS_LIMIT"
          },
          "message": {
            "type": "string",
            "default": "Could not estimate gas limit for this transaction."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "AbiInputDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "internalType": {
            "type": "string"
          },
          "indexed": {
            "type": "boolean"
          },
          "components": {
            "type": "object"
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "AbiOutputDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "internalType": {
            "type": "string"
          },
          "components": {
            "type": "object"
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "AbiObjectDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "constructor",
              "event",
              "function",
              "receive",
              "fallback",
              "error"
            ]
          },
          "name": {
            "type": "string"
          },
          "stateMutability": {
            "type": "string",
            "enum": [
              "pure",
              "view",
              "nonpayable",
              "payable"
            ]
          },
          "payability": {
            "type": "boolean"
          },
          "constant": {
            "type": "boolean"
          },
          "anonymous": {
            "type": "boolean"
          },
          "inputs": {
            "$ref": "#/components/schemas/AbiInputDto"
          },
          "outputs": {
            "$ref": "#/components/schemas/AbiOutputDto"
          }
        },
        "required": [
          "type"
        ]
      },
      "CustomGasDto": {
        "type": "object",
        "properties": {
          "gasPrice": {
            "type": "string"
          },
          "maxFeePerGas": {
            "type": "string"
          },
          "maxPriorityFeePerGas": {
            "type": "string"
          }
        }
      },
      "DeployFromBytecodeDto": {
        "type": "object",
        "properties": {
          "abi": {
            "description": "",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AbiObjectDto"
            }
          },
          "params": {
            "default": [],
            "description": "",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "speed": {
            "enum": [
              "low",
              "average",
              "fast",
              "fastest",
              "custom"
            ],
            "type": "string",
            "description": ""
          },
          "customGas": {
            "description": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomGasDto"
              }
            ]
          },
          "gasLimit": {
            "type": "string",
            "description": ""
          },
          "network": {
            "type": "string",
            "description": ""
          },
          "bytecode": {
            "type": "string",
            "description": ""
          },
          "description": {
            "type": "string",
            "description": ""
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": ""
          },
          "signerWallet": {
            "type": "string",
            "description": ""
          },
          "nonce": {
            "type": "number",
            "description": ""
          },
          "value": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "abi",
          "params",
          "network",
          "bytecode",
          "name",
          "signerWallet"
        ]
      },
      "TransactionLog": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "UNSIGNED",
              "ERROR_TX",
              "ERROR_PUBLISH",
              "PUBLISHED",
              "RECEIVED_BY_STARTON",
              "CREATED_BY_STARTON",
              "COULD_NOT_ESTIMATE_GAS_PRICE",
              "COULD_NOT_INCREASE_GAS_PRICE",
              "GAS_PRICE_ESTIMATED",
              "INVALID_GAS_PRICE",
              "REPLACEMENT_GAS_PRICE_UNDERPRICED",
              "COULD_NOT_ESTIMATE_GAS_LIMIT",
              "GAS_LIMIT_ESTIMATED",
              "EXECUTION_WILL_FAIL",
              "INVALID_ARGUMENT",
              "INSUFFICIENT_FUNDS",
              "INSUFFICIENT_FUNDS_AFTER_BROADCAST",
              "COULD_NOT_ASSIGN_NONCE",
              "COULD_NOT_UNSTUCK_NONCE",
              "NONCE_ASSIGNED",
              "NONCE_EXPIRED",
              "COULD_NOT_SIGN",
              "SIGNED",
              "SENT_TO_MEMPOOL",
              "COULD_NOT_BROADCAST",
              "ALREADY_KNOWN",
              "MINED",
              "CONFIRMED",
              "REPLACED",
              "FAILED",
              "MONITORING_IN_PROGRESS",
              "STUCK_BY_PREVIOUS_TRANSACTION",
              "MAX_GAS_PRICE_REACH",
              "GAS_PRICE_INCREASED",
              "NEW_TRANSACTION_HASH",
              "UNKNOWN",
              "MONITORING_INTERRUPTED"
            ]
          },
          "context": {
            "type": "object"
          },
          "createdAt": {
            "type": "string"
          }
        },
        "required": [
          "message",
          "type",
          "createdAt"
        ]
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "blockHash": {
            "type": "string",
            "nullable": true,
            "description": ""
          },
          "blockNumber": {
            "type": "number",
            "nullable": true,
            "description": ""
          },
          "chainId": {
            "type": "number",
            "description": ""
          },
          "network": {
            "type": "string",
            "description": ""
          },
          "data": {
            "type": "string",
            "nullable": true,
            "description": ""
          },
          "from": {
            "type": "string",
            "description": ""
          },
          "gasLimit": {
            "type": "string",
            "nullable": true,
            "description": ""
          },
          "gasPrice": {
            "type": "string",
            "nullable": true,
            "description": ""
          },
          "maxFeePerGas": {
            "type": "string",
            "nullable": true,
            "description": ""
          },
          "maxPriorityFeePerGas": {
            "type": "string",
            "nullable": true,
            "description": ""
          },
          "metadata": {
            "type": "object",
            "nullable": true,
            "description": ""
          },
          "nonce": {
            "type": "number",
            "nullable": true,
            "description": ""
          },
          "type": {
            "type": "number",
            "nullable": true,
            "description": ""
          },
          "signerWallet": {
            "type": "string",
            "description": ""
          },
          "publishedDate": {
            "format": "date-time",
            "type": "string",
            "nullable": true,
            "description": ""
          },
          "minedDate": {
            "format": "date-time",
            "type": "string",
            "nullable": true,
            "description": ""
          },
          "signedTransaction": {
            "type": "string",
            "nullable": true,
            "description": ""
          },
          "status": {
            "enum": [
              "UNSIGNED",
              "ERROR_TX",
              "ERROR_PUBLISH",
              "PUBLISHED",
              "RECEIVED_BY_STARTON",
              "CREATED_BY_STARTON",
              "COULD_NOT_ESTIMATE_GAS_PRICE",
              "COULD_NOT_INCREASE_GAS_PRICE",
              "GAS_PRICE_ESTIMATED",
              "INVALID_GAS_PRICE",
              "REPLACEMENT_GAS_PRICE_UNDERPRICED",
              "COULD_NOT_ESTIMATE_GAS_LIMIT",
              "GAS_LIMIT_ESTIMATED",
              "EXECUTION_WILL_FAIL",
              "INVALID_ARGUMENT",
              "INSUFFICIENT_FUNDS",
              "INSUFFICIENT_FUNDS_AFTER_BROADCAST",
              "COULD_NOT_ASSIGN_NONCE",
              "COULD_NOT_UNSTUCK_NONCE",
              "NONCE_ASSIGNED",
              "NONCE_EXPIRED",
              "COULD_NOT_SIGN",
              "SIGNED",
              "SENT_TO_MEMPOOL",
              "COULD_NOT_BROADCAST",
              "ALREADY_KNOWN",
              "MINED",
              "CONFIRMED",
              "REPLACED",
              "FAILED",
              "MONITORING_IN_PROGRESS",
              "STUCK_BY_PREVIOUS_TRANSACTION",
              "MAX_GAS_PRICE_REACH",
              "GAS_PRICE_INCREASED",
              "NEW_TRANSACTION_HASH",
              "UNKNOWN",
              "MONITORING_INTERRUPTED"
            ],
            "type": "string",
            "description": ""
          },
          "state": {
            "enum": [
              "SUCCESS",
              "PENDING",
              "MANUAL_ACTION_REQUIRED",
              "ERROR"
            ],
            "type": "string",
            "description": ""
          },
          "speed": {
            "enum": [
              "low",
              "average",
              "fast",
              "fastest",
              "custom"
            ],
            "type": "string",
            "nullable": true,
            "description": ""
          },
          "logs": {
            "description": "",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionLog"
            }
          },
          "to": {
            "type": "string",
            "nullable": true,
            "description": ""
          },
          "transactionHash": {
            "type": "string",
            "nullable": true,
            "description": ""
          },
          "value": {
            "type": "string",
            "description": ""
          },
          "automaticNonce": {
            "type": "boolean",
            "description": ""
          },
          "isDeployTransaction": {
            "type": "boolean",
            "description": ""
          },
          "projectId": {
            "type": "string",
            "description": ""
          },
          "parentTransaction": {
            "type": "string",
            "nullable": true,
            "description": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T01:06:33.951Z",
            "description": ""
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T01:06:33.951Z",
            "description": ""
          }
        },
        "required": [
          "id",
          "chainId",
          "network",
          "from",
          "signerWallet",
          "status",
          "state",
          "logs",
          "value",
          "automaticNonce",
          "isDeployTransaction",
          "projectId",
          "createdAt",
          "updatedAt"
        ]
      },
      "DeploySmartContractResponse": {
        "type": "object",
        "properties": {
          "smartContract": {
            "$ref": "#/components/schemas/SmartContract"
          },
          "transaction": {
            "$ref": "#/components/schemas/Transaction"
          }
        },
        "required": [
          "smartContract",
          "transaction"
        ]
      },
      "MICROSERVICE_NOT_RESPONDING": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 500
          },
          "errorCode": {
            "type": "string",
            "default": "MICROSERVICE_NOT_RESPONDING"
          },
          "message": {
            "type": "string",
            "default": "MICROSERVICE_NOT_RESPONDING"
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "SMART_CONTRACT_NOT_ACTIVATED": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 400
          },
          "errorCode": {
            "type": "string",
            "default": "SMART_CONTRACT_NOT_ACTIVATED"
          },
          "message": {
            "type": "string",
            "default": "This smart contract is not active."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "DeployFromTemplateDto": {
        "type": "object",
        "properties": {
          "network": {
            "type": "string",
            "example": "polygon-mumbai",
            "description": "Network of the smart contract you want to deploy."
          },
          "signerWallet": {
            "type": "string",
            "example": "0x298e760768c8481780397eE28A127eAd584df4ee",
            "description": "Signer wallet of the transaction."
          },
          "templateId": {
            "type": "string",
            "example": "ERC20_META_TRANSACTION",
            "description": "Starton Library template to deploy."
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "example": "TestToken",
            "description": "Contract name on Starton database (off-chain)."
          },
          "description": {
            "type": "string",
            "description": "Contract description on Starton database (off-chain)."
          },
          "params": {
            "default": [],
            "description": "Smart contract constructor parameters.",
            "example": [
              "TestToken",
              "TEST",
              "1000000000000000000000000",
              "0x298e760768c8481780397eE28A127eAd584df4ee"
            ],
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "gasLimit": {
            "type": "string",
            "description": "Optional gas limit"
          },
          "speed": {
            "enum": [
              "low",
              "average",
              "fast",
              "fastest",
              "custom"
            ],
            "type": "string",
            "description": "Gas Speed, by default on average, could be set at custom."
          },
          "customGas": {
            "description": "Custom gas settings for deploy transaction, will be used if speed set to custom",
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomGasDto"
              }
            ]
          },
          "nonce": {
            "type": "number",
            "description": "Nonce manual setting, if nonce referenced, Starton relayer will not automaticly assign nonce."
          },
          "value": {
            "type": "string",
            "description": "If you want to put value in your smart contract deployment (Example: payable constructor)"
          }
        },
        "required": [
          "network",
          "signerWallet",
          "templateId",
          "name",
          "params"
        ]
      },
      "INVALID_FUNCTION": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 400
          },
          "errorCode": {
            "type": "string",
            "default": "INVALID_FUNCTION"
          },
          "message": {
            "type": "string",
            "default": "Some params are invalid."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "CONTRACT_NOT_YET_DEPLOYED": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 400
          },
          "errorCode": {
            "type": "string",
            "default": "CONTRACT_NOT_YET_DEPLOYED"
          },
          "message": {
            "type": "string",
            "default": "Smart contract is not deployed on the blockchain yet."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "CallDto": {
        "type": "object",
        "properties": {
          "functionName": {
            "type": "string",
            "description": ""
          },
          "params": {
            "default": [],
            "description": "",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "speed": {
            "enum": [
              "low",
              "average",
              "fast",
              "fastest",
              "custom"
            ],
            "type": "string",
            "description": ""
          },
          "customGas": {
            "description": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomGasDto"
              }
            ]
          },
          "gasLimit": {
            "type": "string",
            "description": ""
          },
          "signerWallet": {
            "type": "string",
            "description": ""
          },
          "nonce": {
            "type": "number",
            "description": ""
          },
          "value": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "functionName",
          "params",
          "signerWallet"
        ]
      },
      "ReadDto": {
        "type": "object",
        "properties": {
          "functionName": {
            "type": "string",
            "description": ""
          },
          "params": {
            "default": [],
            "description": "",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "functionName",
          "params"
        ]
      },
      "ReadSmartContractResponse": {
        "type": "object",
        "properties": {
          "response": {
            "type": "string",
            "description": ""
          },
          "params": {
            "type": "array",
            "description": "",
            "items": {
              "type": "object"
            }
          },
          "functionName": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "network": {
            "type": "string"
          }
        },
        "required": [
          "response",
          "params",
          "functionName",
          "address",
          "network"
        ]
      },
      "AvailableFunctions": {
        "type": "object",
        "properties": {
          "call": {
            "description": "",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "read": {
            "description": "",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "events": {
            "description": "",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "call",
          "read",
          "events"
        ]
      },
      "INVALID_CONTRACT_ADDRESS": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 400
          },
          "errorCode": {
            "type": "string",
            "default": "INVALID_CONTRACT_ADDRESS"
          },
          "message": {
            "type": "string",
            "default": "This address doesn't refer to a smart-contract on this network."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "ImportSmartContractDto": {
        "type": "object",
        "properties": {
          "abi": {
            "description": "",
            "example": [
              {
                "inputs": [],
                "stateMutability": "nonpayable",
                "type": "constructor"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AbiObjectDto"
            }
          },
          "network": {
            "type": "string",
            "description": "",
            "example": "polygon-mumbai"
          },
          "description": {
            "type": "string",
            "description": "",
            "example": "Minimal smart contract description."
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "",
            "example": "Minimal Contract Test."
          },
          "address": {
            "type": "string",
            "description": "",
            "example": "0x1C1f7A4d7F853856b964947CA03B92993D3ef40e"
          },
          "templateId": {
            "type": "string",
            "description": "",
            "example": "ERC721_META_TRANSACTION"
          },
          "creationHash": {
            "type": "string",
            "description": "",
            "example": "0x55b782a3db6d7b8c1949536110dcaaac69b4f83455959ab2839c09c2ed2ab1da"
          },
          "params": {
            "default": [],
            "description": "Smart contract constructor parameters.",
            "example": [
              "TestToken",
              "TEST",
              "1000000000000000000000000",
              "0x298e760768c8481780397eE28A127eAd584df4ee"
            ],
            "nullable": true,
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "abi",
          "network",
          "name",
          "address"
        ]
      },
      "CreateTransactionDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "description": "Transaction data.",
            "example": "0x1234"
          },
          "gasLimit": {
            "type": "string",
            "description": ""
          },
          "speed": {
            "enum": [
              "low",
              "average",
              "fast",
              "fastest",
              "custom"
            ],
            "type": "string",
            "example": "low",
            "description": "The gas speed you want. If custom it requires customGas field"
          },
          "customGas": {
            "description": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomGasDto"
              }
            ]
          },
          "metadata": {
            "type": "object",
            "description": ""
          },
          "network": {
            "type": "string",
            "example": "polygon-mumbai",
            "description": "Your network you want to perform transaction."
          },
          "nonce": {
            "type": "integer",
            "description": "Your transaction nonce. Don't fill this value if you want to use relayer nonce auto assignation."
          },
          "signerWallet": {
            "type": "string",
            "example": "0x298e760768c8481780397eE28A127eAd584df4ee",
            "description": "Your kms address. It's also the from of your transaction."
          },
          "to": {
            "type": "string",
            "example": "0x298e760768c8481780397eE28A127eAd584df4ee",
            "description": "The address you want to send to."
          },
          "value": {
            "type": "string",
            "example": "0",
            "description": "The value of the transaction in wei."
          }
        },
        "required": [
          "network",
          "signerWallet"
        ]
      },
      "Wallet": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": ""
          },
          "providerKeyId": {
            "type": "string",
            "description": ""
          },
          "kmsId": {
            "type": "string",
            "description": ""
          },
          "name": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": ""
          },
          "projectId": {
            "type": "string",
            "description": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T01:06:34.002Z",
            "description": ""
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T01:06:34.002Z",
            "description": ""
          }
        },
        "required": [
          "address",
          "providerKeyId",
          "kmsId",
          "projectId",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateWalletDto": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "metadata": {
            "type": "object"
          }
        }
      },
      "CreateWalletDto": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "kmsId": {
            "type": "string"
          }
        },
        "required": [
          "kmsId"
        ]
      },
      "ImportProviderKeyDto": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "providerKeyId": {
            "type": "string"
          },
          "provider": {
            "type": "string",
            "enum": [
              "AWS",
              "Vault"
            ]
          }
        },
        "required": [
          "provider"
        ]
      },
      "SignMessageDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "COULD_NOT_PROCESS_ENTITY": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 422
          },
          "errorCode": {
            "type": "string",
            "default": "COULD_NOT_PROCESS_ENTITY"
          },
          "message": {
            "type": "string",
            "default": "Could not process entity."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "NoncesAvailable": {
        "type": "object",
        "properties": {
          "nextNonce": {
            "type": "number"
          },
          "availableNonces": {
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        },
        "required": [
          "nextNonce",
          "availableNonces"
        ]
      },
      "resyncNonce": {
        "type": "object",
        "properties": {
          "nextNonce": {
            "type": "number"
          }
        },
        "required": [
          "nextNonce"
        ]
      },
      "Kms": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "name": {
            "type": "string",
            "description": ""
          },
          "credentials": {
            "type": "object",
            "description": ""
          },
          "provider": {
            "enum": [
              "AWS",
              "Vault"
            ],
            "type": "string",
            "description": ""
          },
          "projectId": {
            "type": "string",
            "description": ""
          },
          "wallets": {
            "type": "object",
            "default": [],
            "description": ""
          },
          "metadata": {
            "type": "object",
            "description": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T01:06:34.008Z",
            "description": ""
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T01:06:34.008Z",
            "description": ""
          }
        },
        "required": [
          "id",
          "name",
          "credentials",
          "provider",
          "projectId",
          "createdAt",
          "updatedAt"
        ]
      },
      "AwsKmsCredentialsDto": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": ""
          },
          "accessKeyId": {
            "type": "string",
            "description": ""
          },
          "region": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "accountId",
          "accessKeyId",
          "region"
        ]
      },
      "CreateKmsDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": ""
          },
          "metadata": {
            "type": "object",
            "description": ""
          },
          "credentials": {
            "description": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/AwsKmsCredentialsDto"
              }
            ]
          },
          "secret": {
            "type": "string",
            "description": ""
          },
          "provider": {
            "type": "string",
            "enum": [
              "AWS",
              "Vault"
            ]
          }
        },
        "required": [
          "name",
          "secret",
          "provider"
        ]
      },
      "NOT_AUTHENTICATED": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 401
          },
          "errorCode": {
            "type": "string",
            "default": "NOT_AUTHENTICATED"
          },
          "message": {
            "type": "string",
            "default": "Not authenticated."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "FORBIDDEN": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 403
          },
          "errorCode": {
            "type": "string",
            "default": "FORBIDDEN"
          },
          "message": {
            "type": "string",
            "default": "Unauthorized."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "WalletRetro": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "external": {
            "type": "boolean"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "address",
          "projectId",
          "description",
          "metadata",
          "external",
          "createdAt",
          "updatedAt"
        ]
      },
      "MAXIMUM_WALLET_REACHED": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 412
          },
          "errorCode": {
            "type": "string",
            "default": "MAXIMUM_WALLET_REACHED"
          },
          "message": {
            "type": "string",
            "default": "You can't create more than 1 address without your own KMS. You must specify AWS credentials to create more."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "AwsKmsCredentialsRetroDto": {
        "type": "object",
        "properties": {
          "arn": {
            "type": "string"
          },
          "keyId": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "accessKeyId": {
            "type": "string"
          },
          "secretAccessKey": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        }
      },
      "CreateRetroWalletDto": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "metadata": {
            "type": "string"
          },
          "credentials": {
            "$ref": "#/components/schemas/AwsKmsCredentialsRetroDto"
          }
        }
      },
      "WalletRetroResponse": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "metadata": {
            "type": "string"
          },
          "external": {
            "type": "boolean"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "address",
          "projectId",
          "external",
          "createdAt",
          "updatedAt"
        ]
      },
      "COULD_NOT_DELETE_KMS_KEY": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 500
          },
          "errorCode": {
            "type": "string",
            "default": "COULD_NOT_DELETE_KMS_KEY"
          },
          "message": {
            "type": "string",
            "default": "COULD_NOT_DELETE_KMS_KEY"
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "AddressNativeBalanceResponse": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "native currency symbol."
          },
          "balance": {
            "type": "string",
            "description": "The amount of native currency the wallet has."
          },
          "decimal": {
            "type": "number",
            "description": "The number of decimals on the blockchain."
          },
          "formatted": {
            "type": "string",
            "description": "The formatted (human readable) output."
          }
        },
        "required": [
          "symbol",
          "balance",
          "decimal",
          "formatted"
        ]
      },
      "ERC20BalanceResponse": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "ERC20 token symbol.",
            "example": "USDT"
          },
          "balance": {
            "type": "string",
            "description": "Balance of the given address.",
            "example": "0"
          },
          "decimal": {
            "type": "number",
            "description": "The number of contract decimals.",
            "example": 6
          },
          "formatted": {
            "type": "string",
            "description": "Formatted balance output.",
            "example": "0.0"
          },
          "contractAddress": {
            "type": "string",
            "description": "ERC20 smart contract address.",
            "example": "0xc2132D05D31c914a87C6611C10748AEb04B58e8F"
          }
        },
        "required": [
          "symbol",
          "balance",
          "decimal",
          "formatted",
          "contractAddress"
        ]
      },
      "SettingRelayer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "projectId": {
            "type": "string",
            "description": ""
          },
          "network": {
            "type": "string",
            "description": ""
          },
          "unstuckMaxGasPrice": {
            "type": "string",
            "description": ""
          },
          "unstuckMissingNonce": {
            "type": "boolean",
            "description": ""
          },
          "unstuckMissingNonceDelay": {
            "type": "number",
            "description": ""
          },
          "unstuckCustomGasPrice": {
            "type": "boolean",
            "description": ""
          },
          "unstuckAutomaticGasPrice": {
            "type": "boolean",
            "description": ""
          },
          "unstuckGasPriceDelay": {
            "type": "number",
            "description": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T01:06:34.016Z",
            "description": ""
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T01:06:34.016Z",
            "description": ""
          }
        },
        "required": [
          "id",
          "projectId",
          "network",
          "unstuckMaxGasPrice",
          "unstuckMissingNonce",
          "unstuckMissingNonceDelay",
          "unstuckCustomGasPrice",
          "unstuckAutomaticGasPrice",
          "unstuckGasPriceDelay",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateSettingRelayerDto": {
        "type": "object",
        "properties": {
          "unstuckMaxGasPrice": {
            "type": "string",
            "description": "The max amount of gas price you are ready to pay in wei.",
            "example": "150000000000"
          },
          "unstuckMissingNonce": {
            "type": "boolean",
            "description": "Allowing Starton to unstuck missing nonce by creating an empty transaction.",
            "example": true
          },
          "unstuckMissingNonceDelay": {
            "type": "number",
            "minimum": 10,
            "maximum": 3600,
            "description": "The delay Starton will wait to create empty transaction to unstuck nonces.",
            "example": 300
          },
          "unstuckCustomGasPrice": {
            "type": "boolean",
            "description": "Tells if you allow Starton to unstuck transactions with custom gasPrices.",
            "example": true
          },
          "unstuckAutomaticGasPrice": {
            "type": "boolean",
            "description": "Tells if you allow Starton to unstuck transactions with automatic gas price.",
            "example": true
          },
          "unstuckGasPriceDelay": {
            "type": "number",
            "minimum": 10,
            "maximum": 3600,
            "description": "The delay Starton will wait to increase gasPrice on stuck transactions.",
            "example": 300
          }
        }
      },
      "GasPriceInfo": {
        "type": "object",
        "properties": {
          "maxFeePerGas": {
            "type": "string",
            "nullable": true,
            "description": "Post eip-1159 gas format."
          },
          "maxPriorityFeePerGas": {
            "type": "string",
            "nullable": true,
            "description": "Post eip-1159 gas format."
          },
          "gasPrice": {
            "type": "string",
            "nullable": true,
            "description": "Pre eip-1159 gas format."
          }
        },
        "required": [
          "maxFeePerGas",
          "maxPriorityFeePerGas",
          "gasPrice"
        ]
      },
      "GasPrices": {
        "type": "object",
        "properties": {
          "low": {
            "description": "low gas price for network",
            "allOf": [
              {
                "$ref": "#/components/schemas/GasPriceInfo"
              }
            ]
          },
          "average": {
            "description": "average gas price for network",
            "allOf": [
              {
                "$ref": "#/components/schemas/GasPriceInfo"
              }
            ]
          },
          "fast": {
            "description": "fast gas price for network",
            "allOf": [
              {
                "$ref": "#/components/schemas/GasPriceInfo"
              }
            ]
          },
          "fastest": {
            "description": "fastest gas price for network",
            "allOf": [
              {
                "$ref": "#/components/schemas/GasPriceInfo"
              }
            ]
          }
        },
        "required": [
          "low",
          "average",
          "fast",
          "fastest"
        ]
      },
      "TOO_EARLY": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 425
          },
          "errorCode": {
            "type": "string",
            "default": "TOO_EARLY"
          },
          "message": {
            "type": "string",
            "default": "Please try later, you already tried too recently"
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "COULD_NOT_PERFORM_REQUEST": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 500
          },
          "errorCode": {
            "type": "string",
            "default": "COULD_NOT_PERFORM_REQUEST"
          },
          "message": {
            "type": "string",
            "default": "Unexpected error occurred performing the request."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "RequireFaucetDto": {
        "type": "object",
        "properties": {
          "wallet": {
            "type": "string",
            "description": "Destination wallet address.",
            "example": "0x298e760768c8481780397eE28A127eAd584df4ee"
          },
          "captchaToken": {
            "type": "string",
            "description": "Captcha token.",
            "example": "testCaptchaToken"
          }
        },
        "required": [
          "wallet"
        ]
      },
      "Faucet": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Faucet claim id."
          },
          "ip": {
            "type": "string",
            "description": "Claim ip."
          },
          "wallet": {
            "type": "string",
            "description": "Claim wallet"
          },
          "network": {
            "type": "string",
            "description": "Testnet network claim.",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "UserId claim.",
            "nullable": true
          },
          "txHash": {
            "type": "string",
            "description": "Hash transaction of native faucet transfer.",
            "nullable": true
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T01:06:34.018Z",
            "description": "Claim date."
          }
        },
        "required": [
          "id",
          "ip",
          "wallet",
          "network",
          "createdAt"
        ]
      },
      "PaginationData": {
        "type": "object",
        "properties": {
          "itemCount": {
            "type": "number"
          },
          "totalItems": {
            "type": "number"
          },
          "itemsPerPage": {
            "type": "number"
          },
          "totalPages": {
            "type": "number"
          },
          "currentPage": {
            "type": "number"
          }
        },
        "required": [
          "itemCount",
          "itemsPerPage",
          "currentPage"
        ]
      },
      "Paginate": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/PaginationData"
          }
        },
        "required": [
          "meta"
        ]
      },
      "SmartContractTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "name": {
            "type": "string",
            "description": ""
          },
          "description": {
            "type": "string",
            "description": ""
          },
          "shortDescription": {
            "type": "string",
            "description": ""
          },
          "githubUrl": {
            "type": "string",
            "description": ""
          },
          "blockchains": {
            "type": "array",
            "description": "",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "description": "",
            "items": {
              "type": "string"
            }
          },
          "category": {
            "enum": [
              "NFT",
              "FUNGIBLE",
              "OTHER",
              "DEPRECATED",
              "SALE",
              "TOOL"
            ],
            "type": "string",
            "description": ""
          },
          "humanReadableAbi": {
            "type": "array",
            "description": "",
            "items": {
              "type": "string"
            }
          },
          "abi": {
            "type": "array",
            "description": "",
            "items": {
              "type": "object"
            }
          },
          "form": {
            "type": "object",
            "description": "",
            "nullable": true
          },
          "compilationDetails": {
            "type": "object",
            "description": "",
            "nullable": true
          },
          "isAudited": {
            "type": "boolean",
            "default": false,
            "description": ""
          },
          "isActivated": {
            "type": "boolean",
            "default": true,
            "description": ""
          },
          "order": {
            "type": "number",
            "default": 0,
            "description": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T01:04:31.519Z",
            "description": ""
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T01:04:31.519Z",
            "description": ""
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "shortDescription",
          "githubUrl",
          "blockchains",
          "tags",
          "category",
          "humanReadableAbi",
          "abi",
          "isAudited",
          "isActivated",
          "order",
          "createdAt",
          "updatedAt"
        ]
      },
      "Rpc": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "url": {
            "type": "string",
            "description": ""
          },
          "networkName": {
            "type": "string",
            "description": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T00:38:51.217Z",
            "description": ""
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T00:38:51.217Z",
            "description": ""
          }
        },
        "required": [
          "id",
          "url",
          "networkName",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateRpcDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": ""
          }
        }
      },
      "CreateRpcDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "url"
        ]
      },
      "Network": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": ""
          },
          "displayName": {
            "type": "string",
            "description": ""
          },
          "blockchain": {
            "type": "string",
            "description": ""
          },
          "logo": {
            "type": "string",
            "description": ""
          },
          "chainId": {
            "type": "number",
            "description": ""
          },
          "symbol": {
            "type": "string",
            "description": ""
          },
          "decimal": {
            "type": "number",
            "description": ""
          },
          "explorerUrl": {
            "type": "string",
            "description": ""
          },
          "confirmationBlocks": {
            "type": "number",
            "description": ""
          },
          "gasPriceRecommendation": {
            "type": "object",
            "description": "",
            "nullable": true
          },
          "testnet": {
            "type": "boolean",
            "description": ""
          },
          "faucetUrl": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "enableRelayer": {
            "type": "boolean",
            "description": ""
          },
          "enableExternalWallet": {
            "type": "boolean",
            "description": ""
          },
          "enableListener": {
            "type": "boolean",
            "description": ""
          },
          "eip1159": {
            "type": "boolean",
            "description": ""
          },
          "verifyTxIntegrity": {
            "type": "boolean",
            "description": ""
          },
          "verifyBlockIntegrity": {
            "type": "boolean",
            "description": ""
          },
          "owner": {
            "type": "string",
            "description": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T00:38:51.237Z",
            "description": ""
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T00:38:51.237Z",
            "description": ""
          }
        },
        "required": [
          "name",
          "displayName",
          "blockchain",
          "logo",
          "chainId",
          "symbol",
          "decimal",
          "explorerUrl",
          "confirmationBlocks",
          "testnet",
          "enableRelayer",
          "enableExternalWallet",
          "enableListener",
          "eip1159",
          "verifyTxIntegrity",
          "verifyBlockIntegrity",
          "owner",
          "createdAt",
          "updatedAt"
        ]
      },
      "GasPriceRecommendationDto": {
        "type": "object",
        "properties": {
          "lowest": {
            "type": "string",
            "description": ""
          },
          "defaultRelayerUnstuck": {
            "type": "string",
            "description": ""
          },
          "max": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "lowest",
          "defaultRelayerUnstuck",
          "max"
        ]
      },
      "ExplorerApiDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": ""
          },
          "type": {
            "enum": [
              "etherscan",
              "blockscout"
            ],
            "type": "string",
            "description": "",
            "example": "etherscan"
          },
          "apiKey": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "url",
          "type",
          "apiKey"
        ]
      },
      "UpdateNetworkDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": ""
          },
          "displayName": {
            "type": "string",
            "description": ""
          },
          "blockchain": {
            "type": "string",
            "description": ""
          },
          "chainId": {
            "type": "number",
            "description": ""
          },
          "logo": {
            "type": "string",
            "description": ""
          },
          "symbol": {
            "type": "string",
            "description": ""
          },
          "decimal": {
            "type": "number",
            "description": ""
          },
          "confirmationBlocks": {
            "type": "number",
            "description": ""
          },
          "enableRelayer": {
            "type": "boolean",
            "description": ""
          },
          "enableExternalWallet": {
            "type": "boolean",
            "description": ""
          },
          "enableListener": {
            "type": "boolean",
            "description": ""
          },
          "eip1159": {
            "type": "boolean",
            "description": ""
          },
          "verifyTxIntegrity": {
            "type": "boolean",
            "description": ""
          },
          "verifyBlockIntegrity": {
            "type": "boolean",
            "description": ""
          },
          "gasPriceRecommendation": {
            "description": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/GasPriceRecommendationDto"
              }
            ]
          },
          "explorerUrl": {
            "type": "string",
            "description": ""
          },
          "explorerApi": {
            "description": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExplorerApiDto"
              }
            ]
          },
          "testnet": {
            "type": "boolean",
            "description": ""
          }
        }
      },
      "CreateNetworkDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": ""
          },
          "displayName": {
            "type": "string",
            "description": ""
          },
          "blockchain": {
            "type": "string",
            "description": ""
          },
          "chainId": {
            "type": "number",
            "description": ""
          },
          "logo": {
            "type": "string",
            "description": ""
          },
          "symbol": {
            "type": "string",
            "description": ""
          },
          "decimal": {
            "type": "number",
            "description": ""
          },
          "confirmationBlocks": {
            "type": "number",
            "description": ""
          },
          "enableRelayer": {
            "type": "boolean",
            "description": ""
          },
          "enableExternalWallet": {
            "type": "boolean",
            "description": ""
          },
          "enableListener": {
            "type": "boolean",
            "description": ""
          },
          "eip1159": {
            "type": "boolean",
            "description": ""
          },
          "verifyTxIntegrity": {
            "type": "boolean",
            "description": ""
          },
          "verifyBlockIntegrity": {
            "type": "boolean",
            "description": ""
          },
          "gasPriceRecommendation": {
            "description": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/GasPriceRecommendationDto"
              }
            ]
          },
          "explorerUrl": {
            "type": "string",
            "description": ""
          },
          "explorerApi": {
            "description": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExplorerApiDto"
              }
            ]
          },
          "testnet": {
            "type": "boolean",
            "description": ""
          }
        },
        "required": [
          "name",
          "displayName",
          "blockchain",
          "chainId",
          "logo",
          "symbol",
          "confirmationBlocks"
        ]
      },
      "Watcher": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "name": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "address": {
            "type": "string",
            "description": ""
          },
          "network": {
            "type": "string",
            "description": ""
          },
          "projectId": {
            "type": "string",
            "description": ""
          },
          "type": {
            "enum": [
              "MINED_TRANSACTION",
              "ADDRESS_ACTIVITY",
              "ADDRESS_RECEIVED_NATIVE_CURRENCY",
              "ADDRESS_SENT_NATIVE_CURRENCY",
              "EVENT_TRANSFER",
              "ERC721_EVENT_TRANSFER",
              "ERC1155_EVENT_TRANSFER_SINGLE",
              "ERC1155_EVENT_TRANSFER_BATCH",
              "EVENT_MINT",
              "EVENT_APPROVAL",
              "EVENT_CUSTOM"
            ],
            "type": "string",
            "description": ""
          },
          "customEventAbi": {
            "type": "array",
            "description": "",
            "nullable": true,
            "items": {
              "type": "object"
            }
          },
          "triggerType": {
            "enum": [
              "BLOCK",
              "TRANSACTION",
              "EVENT",
              "GAS_PRICE"
            ],
            "type": "string",
            "description": ""
          },
          "webhookUrl": {
            "type": "string",
            "description": ""
          },
          "confirmationsBlocks": {
            "type": "number",
            "description": ""
          },
          "paused": {
            "type": "boolean",
            "description": ""
          },
          "pausedReason": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "",
            "nullable": true
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T00:39:17.288Z",
            "description": ""
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T00:39:17.288Z",
            "description": ""
          },
          "customFilters": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "address",
          "network",
          "projectId",
          "type",
          "triggerType",
          "webhookUrl",
          "confirmationsBlocks",
          "paused",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateWatcherDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "",
            "example": "watcher tests",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "",
            "example": "watcher tests",
            "nullable": true
          },
          "webhookUrl": {
            "type": "string",
            "description": "",
            "example": ""
          },
          "confirmationsBlocks": {
            "type": "number",
            "minimum": 0,
            "maximum": 180,
            "description": "",
            "example": 0
          },
          "metadata": {
            "type": "object",
            "description": "",
            "example": {
              "test": "metadata"
            }
          },
          "paused": {
            "type": "boolean",
            "description": "",
            "example": true
          }
        }
      },
      "DATABASE_DUPLICATE": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 409
          },
          "errorCode": {
            "type": "string",
            "default": "DATABASE_DUPLICATE"
          },
          "message": {
            "type": "string",
            "default": "Duplicate conflict when saving this entity to the datbase."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "SERVER_NOT_RESPONDING": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 412
          },
          "errorCode": {
            "type": "string",
            "default": "SERVER_NOT_RESPONDING"
          },
          "message": {
            "type": "string",
            "default": "Your server that receive webhook is not responding."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "CreateWatcherDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "",
            "example": "watcher tests",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "",
            "example": "watcher tests",
            "nullable": true
          },
          "address": {
            "type": "string",
            "description": "",
            "example": "0x298e760768c8481780397eE28A127eAd584df4ee"
          },
          "network": {
            "type": "string",
            "description": "",
            "example": "polygon-mumbai"
          },
          "type": {
            "enum": [
              "MINED_TRANSACTION",
              "ADDRESS_ACTIVITY",
              "ADDRESS_RECEIVED_NATIVE_CURRENCY",
              "ADDRESS_SENT_NATIVE_CURRENCY",
              "EVENT_TRANSFER",
              "ERC721_EVENT_TRANSFER",
              "ERC1155_EVENT_TRANSFER_SINGLE",
              "ERC1155_EVENT_TRANSFER_BATCH",
              "EVENT_MINT",
              "EVENT_APPROVAL",
              "EVENT_CUSTOM"
            ],
            "type": "string",
            "description": "",
            "example": "ADDRESS_ACTIVITY"
          },
          "customEventAbi": {
            "type": "object",
            "description": ""
          },
          "webhookUrl": {
            "type": "string",
            "description": "",
            "example": ""
          },
          "confirmationsBlocks": {
            "type": "number",
            "minimum": 0,
            "maximum": 180,
            "description": "",
            "example": 0
          },
          "metadata": {
            "type": "object",
            "description": "",
            "example": {
              "test": "metadata"
            }
          },
          "customFilters": {
            "type": "object"
          }
        },
        "required": [
          "address",
          "network",
          "type",
          "webhookUrl",
          "confirmationsBlocks"
        ]
      },
      "CreateManyWatcherDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "",
            "example": "watcher tests",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "",
            "example": "watcher tests",
            "nullable": true
          },
          "address": {
            "type": "string",
            "description": "",
            "example": "0x298e760768c8481780397eE28A127eAd584df4ee"
          },
          "type": {
            "enum": [
              "MINED_TRANSACTION",
              "ADDRESS_ACTIVITY",
              "ADDRESS_RECEIVED_NATIVE_CURRENCY",
              "ADDRESS_SENT_NATIVE_CURRENCY",
              "EVENT_TRANSFER",
              "ERC721_EVENT_TRANSFER",
              "ERC1155_EVENT_TRANSFER_SINGLE",
              "ERC1155_EVENT_TRANSFER_BATCH",
              "EVENT_MINT",
              "EVENT_APPROVAL",
              "EVENT_CUSTOM"
            ],
            "type": "string",
            "description": "",
            "example": "ADDRESS_ACTIVITY"
          },
          "customEventAbi": {
            "type": "object",
            "description": ""
          },
          "webhookUrl": {
            "type": "string",
            "description": "",
            "example": ""
          },
          "confirmationsBlocks": {
            "type": "number",
            "minimum": 0,
            "maximum": 180,
            "description": "",
            "example": 0
          },
          "metadata": {
            "type": "object",
            "description": "",
            "example": {
              "test": "metadata"
            }
          },
          "networks": {
            "description": "",
            "example": [
              "polygon-mainnet",
              "polygon-mumbai"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customFilters": {
            "type": "object"
          }
        },
        "required": [
          "address",
          "type",
          "webhookUrl",
          "confirmationsBlocks",
          "networks"
        ]
      },
      "WatcherEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "blockNumber": {
            "type": "number",
            "description": ""
          },
          "blockHash": {
            "type": "string",
            "description": ""
          },
          "txHash": {
            "type": "string",
            "description": ""
          },
          "network": {
            "type": "string",
            "description": ""
          },
          "status": {
            "enum": [
              "PENDING_VALIDATION",
              "COMPLETED",
              "CANCELED"
            ],
            "type": "string",
            "description": ""
          },
          "payload": {
            "type": "object",
            "description": ""
          },
          "projectId": {
            "type": "string",
            "description": ""
          },
          "watcherId": {
            "type": "string",
            "description": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T00:39:17.444Z",
            "description": ""
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T00:39:17.444Z",
            "description": ""
          }
        },
        "required": [
          "id",
          "blockNumber",
          "blockHash",
          "txHash",
          "network",
          "status",
          "payload",
          "projectId",
          "watcherId",
          "createdAt",
          "updatedAt"
        ]
      },
      "WebhookSigningSecret": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": ""
          },
          "secret": {
            "type": "string",
            "description": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T00:39:10.707Z",
            "description": ""
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T00:39:10.707Z",
            "description": ""
          }
        },
        "required": [
          "projectId",
          "secret",
          "createdAt",
          "updatedAt"
        ]
      },
      "Webhook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "refId": {
            "type": "string",
            "description": ""
          },
          "status": {
            "enum": [
              "RETRYING",
              "SUCCESSFUL",
              "FAILED",
              "CANCELED"
            ],
            "type": "string",
            "description": ""
          },
          "payload": {
            "type": "object",
            "description": "",
            "nullable": true
          },
          "url": {
            "type": "string",
            "description": ""
          },
          "headers": {
            "type": "object",
            "description": "",
            "nullable": true
          },
          "projectId": {
            "type": "string",
            "description": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T00:39:10.712Z",
            "description": ""
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T00:39:10.712Z",
            "description": ""
          }
        },
        "required": [
          "id",
          "refId",
          "status",
          "payload",
          "url",
          "headers",
          "projectId",
          "createdAt",
          "updatedAt"
        ]
      },
      "COULD_NOT_RESEND_WEBHOOK": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 412
          },
          "errorCode": {
            "type": "string",
            "default": "COULD_NOT_RESEND_WEBHOOK"
          },
          "message": {
            "type": "string",
            "default": "Could not resend webhook."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "COULD_NOT_CANCEL_WEBHOOK": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 412
          },
          "errorCode": {
            "type": "string",
            "default": "COULD_NOT_CANCEL_WEBHOOK"
          },
          "message": {
            "type": "string",
            "default": "Could not cancel webhook."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "DirectoryContent": {
        "type": "object",
        "properties": {
          "cid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "size": {
            "type": "number"
          },
          "type": {
            "type": "string",
            "enum": [
              "directory",
              "file"
            ]
          }
        },
        "required": [
          "cid",
          "name",
          "size"
        ]
      },
      "Pin": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "origins": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object"
          },
          "status": {
            "enum": [
              "queued",
              "pinning",
              "pinned",
              "failed",
              "deleted"
            ],
            "type": "string"
          },
          "delegates": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "size": {
            "type": "number"
          },
          "type": {
            "enum": [
              "directory",
              "file"
            ],
            "type": "string"
          },
          "directoryContent": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DirectoryContent"
            }
          },
          "projectId": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T00:39:13.763Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T00:39:13.763Z"
          }
        },
        "required": [
          "id",
          "status",
          "projectId",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdatePinDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "metadata": {
            "type": "object"
          }
        }
      },
      "MAXIMUM_STORAGE_REACHED": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 413
          },
          "errorCode": {
            "type": "string",
            "default": "MAXIMUM_STORAGE_REACHED"
          },
          "message": {
            "type": "string",
            "default": "The max storage size allowed for this project would be exceeded."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "CreatePinDto": {
        "type": "object",
        "properties": {
          "cid": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "metadata": {
            "type": "object"
          }
        },
        "required": [
          "cid"
        ]
      },
      "StorageUsed": {
        "type": "object",
        "properties": {
          "currentStorageUsed": {
            "type": "number"
          },
          "maxAllowed": {
            "type": "number"
          },
          "freeSpaceRemaining": {
            "type": "number"
          }
        },
        "required": [
          "currentStorageUsed",
          "maxAllowed",
          "freeSpaceRemaining"
        ]
      },
      "PAYLOAD_TOO_LARGE": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 413
          },
          "errorCode": {
            "type": "string",
            "default": "PAYLOAD_TOO_LARGE"
          },
          "message": {
            "type": "string",
            "default": "Payload too large."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "UploadJsonDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "content": {
            "type": "object"
          },
          "metadata": {
            "type": "object"
          }
        },
        "required": [
          "name",
          "content"
        ]
      },
      "PinResult": {
        "type": "object",
        "properties": {
          "cid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "origins": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "meta": {
            "type": "object"
          }
        }
      },
      "PinInfo": {
        "type": "object",
        "properties": {
          "size": {
            "type": "number"
          },
          "directoryContent": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DirectoryContent"
            }
          }
        },
        "required": [
          "size"
        ]
      },
      "PinningServiceResult": {
        "type": "object",
        "properties": {
          "requestid": {
            "type": "string"
          },
          "status": {
            "enum": [
              "queued",
              "pinning",
              "pinned",
              "failed",
              "deleted"
            ],
            "type": "string"
          },
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "pin": {
            "$ref": "#/components/schemas/PinResult"
          },
          "delegates": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "info": {
            "$ref": "#/components/schemas/PinInfo"
          }
        },
        "required": [
          "requestid",
          "status",
          "created",
          "pin",
          "delegates"
        ]
      },
      "PinningServicePinResultPaginated": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PinningServiceResult"
            }
          }
        },
        "required": [
          "count",
          "results"
        ]
      },
      "PinningServiceCreatePinDto": {
        "type": "object",
        "properties": {
          "cid": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "origins": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "meta": {
            "type": "object"
          }
        },
        "required": [
          "cid"
        ]
      },
      "PinningContentPaginated": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number"
          },
          "results": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "count",
          "results"
        ]
      },
      "CreateStoreFileRequestDto": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object"
          },
          "isSync": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "CreateStoreMultipleContentsRequestDto": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object"
          },
          "jsons": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "folderName": {
            "type": "string"
          },
          "isSync": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "PROJECT_ID_HEADER_REQUIRED": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 400
          },
          "errorCode": {
            "type": "string",
            "default": "PROJECT_ID_HEADER_REQUIRED"
          },
          "message": {
            "type": "string",
            "default": "You must set an header x-project-id when logged with cookie"
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "CreateStoreJsonRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "content": {
            "type": "object"
          },
          "meta": {
            "type": "object"
          },
          "isSync": {
            "type": "boolean",
            "default": false
          }
        },
        "required": [
          "name",
          "content"
        ]
      },
      "PinningPinResultPaginated": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number"
          },
          "results": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "count",
          "results"
        ]
      },
      "PinningCreatePinDto": {
        "type": "object",
        "properties": {
          "cid": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "origins": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "meta": {
            "type": "object"
          }
        },
        "required": [
          "cid"
        ]
      },
      "StripeConsumerAddressDto": {
        "type": "object",
        "properties": {
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "line1": {
            "type": "string"
          },
          "line2": {
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        }
      },
      "StripeConsumerTaxDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "StripeConsumerDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/StripeConsumerAddressDto"
          },
          "tax": {
            "$ref": "#/components/schemas/StripeConsumerTaxDto"
          }
        }
      },
      "SubscriptionUpgradeDto": {
        "type": "object",
        "properties": {
          "plan": {
            "enum": [
              "TIER_1",
              "TIER_2",
              "TIER_3"
            ],
            "type": "string"
          },
          "paymentMethod": {
            "type": "string"
          },
          "coupon": {
            "type": "string"
          },
          "currency": {
            "enum": [
              "eur",
              "usd"
            ],
            "type": "string"
          }
        },
        "required": [
          "plan"
        ]
      },
      "ProjectBillingInfo": {
        "type": "object",
        "properties": {
          "order": {
            "type": "number"
          },
          "price": {
            "type": "number"
          },
          "monthlyComputeUnit": {
            "type": "number"
          },
          "computeUnitPrice": {
            "type": "number"
          }
        },
        "required": [
          "order",
          "price",
          "monthlyComputeUnit",
          "computeUnitPrice"
        ]
      },
      "ProjectStripeInfo": {
        "type": "object",
        "properties": {
          "consumerId": {
            "type": "string"
          },
          "subscriptionId": {
            "type": "string"
          },
          "meteredSubscriptionItemId": {
            "type": "string"
          },
          "cancelAtPeriodEnd": {
            "type": "boolean"
          }
        },
        "required": [
          "consumerId",
          "subscriptionId",
          "meteredSubscriptionItemId",
          "cancelAtPeriodEnd"
        ]
      },
      "ProjectServiceUsed": {
        "type": "object",
        "properties": {
          "ipfs": {
            "type": "string"
          },
          "kms": {
            "type": "string"
          },
          "apiKey": {
            "type": "string"
          },
          "watcher": {
            "type": "string"
          },
          "library": {
            "type": "string"
          },
          "externalWallet": {
            "type": "string"
          },
          "relayer": {
            "type": "string"
          },
          "readData": {
            "type": "string"
          }
        },
        "required": [
          "ipfs",
          "kms",
          "apiKey",
          "watcher",
          "library",
          "externalWallet",
          "relayer",
          "readData"
        ]
      },
      "ProjectFeatureFlag": {
        "type": "object",
        "properties": {
          "mainnet": {
            "type": "boolean"
          }
        },
        "required": [
          "mainnet"
        ]
      },
      "Project": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "subscriptionPlan": {
            "enum": [
              "FREE",
              "TIER_1",
              "TIER_2",
              "TIER_3",
              "CUSTOM"
            ],
            "type": "string"
          },
          "billing": {
            "$ref": "#/components/schemas/ProjectBillingInfo"
          },
          "autoScalingLimit": {
            "type": "number"
          },
          "stripe": {
            "$ref": "#/components/schemas/ProjectStripeInfo"
          },
          "billingAccountId": {
            "type": "string"
          },
          "ownerId": {
            "type": "string"
          },
          "serviceUsed": {
            "$ref": "#/components/schemas/ProjectServiceUsed"
          },
          "featureFlag": {
            "$ref": "#/components/schemas/ProjectFeatureFlag"
          },
          "playground": {
            "type": "object"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T00:39:33.233Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T00:39:33.233Z"
          }
        },
        "required": [
          "id",
          "name",
          "email",
          "color",
          "subscriptionPlan",
          "billing",
          "autoScalingLimit",
          "stripe",
          "ownerId",
          "serviceUsed",
          "featureFlag",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateProjectServiceUsedDto": {
        "type": "object",
        "properties": {
          "ipfs": {
            "type": "string"
          },
          "kms": {
            "type": "string"
          },
          "apiKey": {
            "type": "string"
          },
          "watcher": {
            "type": "string"
          },
          "library": {
            "type": "string"
          },
          "externalWallet": {
            "type": "string"
          },
          "relayer": {
            "type": "string"
          },
          "readData": {
            "type": "string"
          }
        }
      },
      "UpdateProjectDto": {
        "type": "object",
        "properties": {
          "autoScalingLimit": {
            "type": "number"
          },
          "serviceUsed": {
            "$ref": "#/components/schemas/UpdateProjectServiceUsedDto"
          },
          "playground": {
            "type": "object"
          },
          "description": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "maxLength": 255
          }
        }
      },
      "MAX_FREEMIUM_PROJECT_REACH": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 402
          },
          "errorCode": {
            "type": "string",
            "default": "MAX_FREEMIUM_PROJECT_REACH"
          },
          "message": {
            "type": "string",
            "default": "You can't create more freemium project."
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "BILLING_ACCOUNT_NOT_ACTIVATED": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "default": 403
          },
          "errorCode": {
            "type": "string",
            "default": "BILLING_ACCOUNT_NOT_ACTIVATED"
          },
          "message": {
            "type": "string",
            "default": "Your billing account is not activated, please contact us"
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "errorCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "CreateProjectDto": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "email": {
            "type": "string"
          },
          "color": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "ChangePlanDto": {
        "type": "object",
        "properties": {
          "plan": {
            "type": "string",
            "enum": [
              "FREE",
              "TIER_1",
              "TIER_2",
              "TIER_3",
              "CUSTOM"
            ]
          },
          "computeUnitPrice": {
            "type": "number"
          },
          "monthlyComputeUnit": {
            "type": "number"
          }
        },
        "required": [
          "plan"
        ]
      },
      "BillingAccount": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "isEnabled": {
            "type": "boolean"
          },
          "ownerId": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T00:39:33.251Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T00:39:33.251Z"
          }
        },
        "required": [
          "id",
          "name",
          "isEnabled",
          "ownerId",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateBillingAccountDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "CreateBillingAccountDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "MonthlyUsage": {
        "type": "object",
        "properties": {
          "computeUnit": {
            "type": "number"
          },
          "month": {
            "type": "string"
          }
        },
        "required": [
          "computeUnit",
          "month"
        ]
      },
      "CreateInvitationDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "owner"
            ]
          }
        },
        "required": [
          "email",
          "role"
        ]
      },
      "Invitation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "owner"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T00:39:33.260Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T00:39:33.260Z"
          }
        },
        "required": [
          "id",
          "projectId",
          "email",
          "role",
          "createdAt",
          "updatedAt"
        ]
      },
      "ClaimInvitationDto": {
        "type": "object",
        "properties": {
          "secret": {
            "type": "string"
          },
          "action": {
            "type": "string",
            "enum": [
              "accept",
              "refuse"
            ]
          }
        },
        "required": [
          "secret",
          "action"
        ]
      },
      "CreateApiKeyDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "",
            "example": "testApiKey"
          },
          "description": {
            "type": "string",
            "description": "",
            "example": ""
          },
          "scope": {
            "type": "object",
            "description": ""
          }
        },
        "required": [
          "scope"
        ]
      },
      "ApiKey": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "keyPublicId": {
            "type": "string",
            "description": ""
          },
          "name": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "scope": {
            "type": "object",
            "description": ""
          },
          "projectId": {
            "type": "string",
            "description": ""
          },
          "expirationDate": {
            "format": "date-time",
            "type": "string",
            "description": "",
            "nullable": true
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T00:39:33.335Z",
            "description": ""
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T00:39:33.335Z",
            "description": ""
          },
          "ownerId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "keyPublicId",
          "scope",
          "projectId",
          "createdAt",
          "updatedAt"
        ]
      },
      "ProjectMember": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "fullName",
          "email"
        ]
      },
      "Usage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "day": {
            "format": "date-time",
            "type": "string",
            "default": "2023-10-23T00:39:33.336Z"
          },
          "computeUnit": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "projectId",
          "day",
          "computeUnit"
        ]
      }
    }
  }
}
